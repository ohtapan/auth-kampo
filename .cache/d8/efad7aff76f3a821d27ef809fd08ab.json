{"id":"node_modules/@aws-amplify/analytics/lib/Analytics.js","dependencies":[{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\Analytics.js.map","includedInParent":true,"mtime":1557861886000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\src\\Analytics.ts","includedInParent":true,"mtime":1557861738000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\package.json","includedInParent":true,"mtime":1560308010598},{"name":"@aws-amplify/core","loc":{"line":58,"column":21},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\Analytics.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"},{"name":"./Providers/AWSPinpointProvider","loc":{"line":59,"column":36},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\Analytics.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\Providers\\AWSPinpointProvider.js"},{"name":"./trackers","loc":{"line":60,"column":25},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\Analytics.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\trackers\\index.js"}],"generated":{"js":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@aws-amplify/core\");\nvar AWSPinpointProvider_1 = require(\"./Providers/AWSPinpointProvider\");\nvar trackers_1 = require(\"./trackers\");\nvar logger = new core_1.ConsoleLogger('AnalyticsClass');\nvar AMPLIFY_SYMBOL = ((typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') ?\n    Symbol.for('amplify_default') : '@@amplify_default');\nvar dispatchAnalyticsEvent = function (event, data, message) {\n    core_1.Hub.dispatch('analytics', { event: event, data: data, message: message }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar trackers = {\n    'pageView': trackers_1.PageViewTracker,\n    'event': trackers_1.EventTracker,\n    'session': trackers_1.SessionTracker\n};\n/**\n* Provide mobile analytics client functions\n*/\nvar AnalyticsClass = /** @class */ (function () {\n    /**\n     * Initialize Analtyics\n     * @param config - Configuration of the Analytics\n     */\n    function AnalyticsClass() {\n        this._config = {};\n        this._pluggables = [];\n        this._disabled = false;\n        this._trackers = {};\n        this.record = this.record.bind(this);\n    }\n    AnalyticsClass.prototype.getModuleName = function () {\n        return 'Analytics';\n    };\n    /**\n     * configure Analytics\n     * @param {Object} config - Configuration of the Analytics\n     */\n    AnalyticsClass.prototype.configure = function (config) {\n        var _this = this;\n        if (!config)\n            return this._config;\n        logger.debug('configure Analytics', config);\n        var amplifyConfig = core_1.Parser.parseMobilehubConfig(config);\n        this._config = Object.assign({}, this._config, amplifyConfig.Analytics, config);\n        if (this._config['disabled']) {\n            this._disabled = true;\n        }\n        this._pluggables.forEach(function (pluggable) {\n            // for backward compatibility\n            var providerConfig = pluggable.getProviderName() === 'AWSPinpoint' && !_this._config['AWSPinpoint'] ?\n                _this._config : _this._config[pluggable.getProviderName()];\n            pluggable.configure(__assign({ disabled: _this._config['disabled'] }, providerConfig));\n        });\n        if (this._pluggables.length === 0) {\n            this.addPluggable(new AWSPinpointProvider_1.default());\n        }\n        // turn on the autoSessionRecord if not specified\n        if (this._config['autoSessionRecord'] === undefined) {\n            this._config['autoSessionRecord'] = true;\n        }\n        dispatchAnalyticsEvent('configured', null, \"The Analytics category has been configured successfully\");\n        logger.debug('current configuration', this._config);\n        return this._config;\n    };\n    /**\n     * add plugin into Analytics category\n     * @param {Object} pluggable - an instance of the plugin\n     */\n    AnalyticsClass.prototype.addPluggable = function (pluggable) {\n        if (pluggable && pluggable.getCategory() === 'Analytics') {\n            this._pluggables.push(pluggable);\n            // for backward compatibility\n            var providerConfig = pluggable.getProviderName() === 'AWSPinpoint' && !this._config['AWSPinpoint'] ?\n                this._config : this._config[pluggable.getProviderName()];\n            var config = __assign({ disabled: this._config['disabled'] }, providerConfig);\n            pluggable.configure(config);\n            return config;\n        }\n    };\n    /**\n     * Get the plugin object\n     * @param providerName - the name of the plugin\n     */\n    AnalyticsClass.prototype.getPluggable = function (providerName) {\n        for (var i = 0; i < this._pluggables.length; i += 1) {\n            var pluggable = this._pluggables[i];\n            if (pluggable.getProviderName() === providerName) {\n                return pluggable;\n            }\n        }\n        logger.debug('No plugin found with providerName', providerName);\n        return null;\n    };\n    /**\n     * Remove the plugin object\n     * @param providerName - the name of the plugin\n     */\n    AnalyticsClass.prototype.removePluggable = function (providerName) {\n        var idx = 0;\n        while (idx < this._pluggables.length) {\n            if (this._pluggables[idx].getProviderName() === providerName) {\n                break;\n            }\n            idx += 1;\n        }\n        if (idx === this._pluggables.length) {\n            logger.debug('No plugin found with providerName', providerName);\n            return;\n        }\n        else {\n            this._pluggables.splice(idx, idx + 1);\n            return;\n        }\n    };\n    /**\n     * stop sending events\n     */\n    AnalyticsClass.prototype.disable = function () {\n        this._disabled = true;\n    };\n    /**\n     * start sending events\n     */\n    AnalyticsClass.prototype.enable = function () {\n        this._disabled = false;\n    };\n    /**\n     * Record Session start\n     * @return - A promise which resolves if buffer doesn't overflow\n     */\n    AnalyticsClass.prototype.startSession = function (provider) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                params = { event: { name: '_session.start' }, provider: provider };\n                return [2 /*return*/, this._sendEvent(params)];\n            });\n        });\n    };\n    /**\n     * Record Session stop\n     * @return - A promise which resolves if buffer doesn't overflow\n     */\n    AnalyticsClass.prototype.stopSession = function (provider) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                params = { event: { name: '_session.stop' }, provider: provider };\n                return [2 /*return*/, this._sendEvent(params)];\n            });\n        });\n    };\n    /**\n     * Record one analytic event and send it to Pinpoint\n     * @param {String} name - The name of the event\n     * @param {Object} [attributs] - Attributes of the event\n     * @param {Object} [metrics] - Event metrics\n     * @return - A promise which resolves if buffer doesn't overflow\n     */\n    AnalyticsClass.prototype.record = function (event, provider, metrics) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errMsg, params;\n            return __generator(this, function (_a) {\n                if (!this.isAnalyticsConfigured()) {\n                    errMsg = 'Analytics has not been configured';\n                    logger.debug(errMsg);\n                    return [2 /*return*/, Promise.reject(new Error(errMsg))];\n                }\n                params = null;\n                // this is just for compatibility, going to be deprecated\n                if (typeof event === 'string') {\n                    params = {\n                        'event': {\n                            name: event,\n                            attributes: provider,\n                            metrics: metrics\n                        },\n                        provider: 'AWSPinpoint'\n                    };\n                }\n                else {\n                    params = { event: event, provider: provider };\n                }\n                return [2 /*return*/, this._sendEvent(params)];\n            });\n        });\n    };\n    AnalyticsClass.prototype.updateEndpoint = function (attrs, provider) {\n        return __awaiter(this, void 0, void 0, function () {\n            var event;\n            return __generator(this, function (_a) {\n                event = Object.assign({ name: '_update_endpoint' }, attrs);\n                return [2 /*return*/, this.record(event, provider)];\n            });\n        });\n    };\n    AnalyticsClass.prototype._sendEvent = function (params) {\n        if (!this.isAnalyticsConfigured()) {\n            var errMsg = 'Analytics has not been configured';\n            logger.debug(errMsg);\n            return Promise.reject(new Error(errMsg));\n        }\n        if (this._disabled) {\n            logger.debug('Analytics has been disabled');\n            return Promise.resolve();\n        }\n        var provider = params.provider ? params.provider : 'AWSPinpoint';\n        this._pluggables.forEach(function (pluggable) {\n            if (pluggable.getProviderName() === provider) {\n                pluggable.record(params);\n            }\n        });\n        return Promise.resolve();\n    };\n    AnalyticsClass.prototype.autoTrack = function (trackerType, opts) {\n        if (!trackers[trackerType]) {\n            logger.debug('invalid tracker type');\n            return;\n        }\n        // to sync up two different configuration ways of auto session tracking\n        if (trackerType === 'session') {\n            this._config['autoSessionRecord'] = opts['enable'];\n        }\n        var tracker = this._trackers[trackerType];\n        if (!tracker) {\n            this._trackers[trackerType] = new (trackers[trackerType])(this.record, opts);\n        }\n        else {\n            tracker.configure(opts);\n        }\n    };\n    AnalyticsClass.prototype.isAnalyticsConfigured = function () {\n        return this._config && Object.entries(this._config).length > 0;\n    };\n    return AnalyticsClass;\n}());\nexports.default = AnalyticsClass;\n"},"sourceMaps":{"js":{"version":3,"file":"Analytics.js","sourceRoot":"","sources":["../src/Analytics.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport {\r\n    ConsoleLogger as Logger,\r\n    missingConfig,\r\n    Hub,\r\n    Parser,\r\n    Platform\r\n} from '@aws-amplify/core';\r\nimport AWSPinpointProvider from './Providers/AWSPinpointProvider';\r\n\r\nimport { AnalyticsProvider, EventAttributes, EventMetrics, pageViewTrackOpts } from './types';\r\nimport { PageViewTracker, EventTracker, SessionTracker } from './trackers';\r\n\r\nconst logger = new Logger('AnalyticsClass');\r\n\r\nconst AMPLIFY_SYMBOL = ((typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') ?\r\n    Symbol.for('amplify_default') : '@@amplify_default') as Symbol;\r\n\r\nconst dispatchAnalyticsEvent = (event:string, data:any, message:string) => {\r\n    Hub.dispatch('analytics', { event, data, message }, 'Analytics', AMPLIFY_SYMBOL);\r\n};\r\n\r\nconst trackers = {\r\n    'pageView': PageViewTracker,\r\n    'event': EventTracker,\r\n    'session': SessionTracker\r\n};\r\n\r\n/**\r\n* Provide mobile analytics client functions\r\n*/\r\nexport default class AnalyticsClass {\r\n    private _config;\r\n    private _provider;\r\n    private _pluggables: AnalyticsProvider[];\r\n    private _disabled;\r\n    private _autoSessionRecord;\r\n    private _trackers;\r\n\r\n    /**\r\n     * Initialize Analtyics\r\n     * @param config - Configuration of the Analytics\r\n     */\r\n    constructor() {\r\n        this._config = {};\r\n        this._pluggables = [];\r\n        this._disabled = false;\r\n        this._trackers = {};\r\n\r\n        this.record = this.record.bind(this);\r\n    }\r\n\r\n    public getModuleName() {\r\n        return 'Analytics';\r\n    }\r\n    /**\r\n     * configure Analytics\r\n     * @param {Object} config - Configuration of the Analytics\r\n     */\r\n    public configure(config?) {\r\n        if (!config) return this._config;\r\n        logger.debug('configure Analytics', config);\r\n        const amplifyConfig = Parser.parseMobilehubConfig(config);\r\n        this._config = Object.assign({}, this._config, amplifyConfig.Analytics, config);\r\n\r\n        if (this._config['disabled']) {\r\n            this._disabled = true;\r\n        }\r\n\r\n        this._pluggables.forEach((pluggable) => {\r\n            // for backward compatibility\r\n            const providerConfig = pluggable.getProviderName() === 'AWSPinpoint' && !this._config['AWSPinpoint'] ?\r\n                this._config : this._config[pluggable.getProviderName()];\r\n            \r\n            pluggable.configure({ disabled: this._config['disabled'], ...providerConfig} );\r\n        });\r\n\r\n        if (this._pluggables.length === 0) {\r\n            this.addPluggable(new AWSPinpointProvider());\r\n        }\r\n\r\n        // turn on the autoSessionRecord if not specified\r\n        if (this._config['autoSessionRecord'] === undefined) {\r\n            this._config['autoSessionRecord'] = true;\r\n        }\r\n\r\n        dispatchAnalyticsEvent(\r\n            'configured', \r\n            null,\r\n            `The Analytics category has been configured successfully`\r\n        );\r\n        logger.debug('current configuration', this._config);\r\n\r\n        \r\n        return this._config;\r\n    }\r\n\r\n    /**\r\n     * add plugin into Analytics category\r\n     * @param {Object} pluggable - an instance of the plugin\r\n     */\r\n    public addPluggable(pluggable: AnalyticsProvider) {\r\n        if (pluggable && pluggable.getCategory() === 'Analytics') {\r\n            this._pluggables.push(pluggable);\r\n            // for backward compatibility\r\n            const providerConfig = pluggable.getProviderName() === 'AWSPinpoint' && !this._config['AWSPinpoint'] ?\r\n                this._config : this._config[pluggable.getProviderName()];\r\n            const config = { disabled: this._config['disabled'], ...providerConfig };\r\n            pluggable.configure(config);\r\n            return config;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the plugin object\r\n     * @param providerName - the name of the plugin \r\n     */\r\n    public getPluggable(providerName) {\r\n        for (let i = 0; i < this._pluggables.length; i += 1) {\r\n            const pluggable = this._pluggables[i];\r\n            if (pluggable.getProviderName() === providerName) {\r\n                return pluggable;\r\n            }\r\n        }\r\n      \r\n        logger.debug('No plugin found with providerName', providerName);\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove the plugin object\r\n     * @param providerName - the name of the plugin\r\n     */\r\n    public removePluggable(providerName) {\r\n        let idx = 0;\r\n        while (idx < this._pluggables.length) {\r\n            if (this._pluggables[idx].getProviderName() === providerName) {\r\n                break;\r\n            }\r\n            idx += 1;\r\n        }\r\n\r\n        if (idx === this._pluggables.length) {\r\n            logger.debug('No plugin found with providerName', providerName);\r\n            return;\r\n        } else {\r\n            this._pluggables.splice(idx, idx + 1);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stop sending events\r\n     */\r\n    public disable() {\r\n        this._disabled = true;\r\n    }\r\n\r\n    /**\r\n     * start sending events\r\n     */\r\n    public enable() {\r\n        this._disabled = false;\r\n    }\r\n\r\n    /**\r\n     * Record Session start\r\n     * @return - A promise which resolves if buffer doesn't overflow\r\n     */\r\n    public async startSession(provider?: string) {\r\n        const params = { event: { name: '_session.start' },  provider };\r\n        return this._sendEvent(params);\r\n    }\r\n\r\n    /**\r\n     * Record Session stop\r\n     * @return - A promise which resolves if buffer doesn't overflow\r\n     */\r\n    public async stopSession(provider?: string) {\r\n        const params = { event: { name: '_session.stop' }, provider };\r\n        return this._sendEvent(params);\r\n    }\r\n\r\n    /**\r\n     * Record one analytic event and send it to Pinpoint\r\n     * @param {String} name - The name of the event\r\n     * @param {Object} [attributs] - Attributes of the event\r\n     * @param {Object} [metrics] - Event metrics\r\n     * @return - A promise which resolves if buffer doesn't overflow\r\n     */\r\n    public async record(event: string | object, provider? , metrics?: EventMetrics) {\r\n        if (!this.isAnalyticsConfigured()) {\r\n            const errMsg = 'Analytics has not been configured';\r\n            logger.debug(errMsg);\r\n            return Promise.reject(new Error(errMsg));\r\n        }\r\n\r\n        let params = null;\r\n        // this is just for compatibility, going to be deprecated\r\n        if (typeof event === 'string') {\r\n            params =  {\r\n                'event': {\r\n                    name: event, \r\n                    attributes: provider, \r\n                    metrics\r\n                }, \r\n                provider: 'AWSPinpoint'\r\n            };\r\n        } else {\r\n            params = { event, provider };\r\n        }\r\n        return this._sendEvent(params);\r\n    }\r\n\r\n    public async updateEndpoint(attrs, provider?) {\r\n        const event = Object.assign({ name: '_update_endpoint' }, attrs);\r\n\r\n        return this.record(event, provider);\r\n    }\r\n\r\n    private _sendEvent(params) {\r\n        if (!this.isAnalyticsConfigured()) {\r\n            const errMsg = 'Analytics has not been configured';\r\n            logger.debug(errMsg);\r\n            return Promise.reject(new Error(errMsg));\r\n        }\r\n\r\n        if (this._disabled) {\r\n            logger.debug('Analytics has been disabled');\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const provider = params.provider? params.provider: 'AWSPinpoint';\r\n        \r\n        this._pluggables.forEach((pluggable) => {\r\n            if (pluggable.getProviderName() === provider) {\r\n                pluggable.record(params);\r\n            }\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public autoTrack(trackerType, opts) {\r\n        if (!trackers[trackerType]) {\r\n            logger.debug('invalid tracker type');\r\n            return;\r\n        }\r\n\r\n        // to sync up two different configuration ways of auto session tracking\r\n        if (trackerType === 'session') {\r\n           this._config['autoSessionRecord'] = opts['enable'];\r\n        }\r\n        \r\n        const tracker = this._trackers[trackerType];\r\n        if (!tracker) {\r\n            this._trackers[trackerType] = new (trackers[trackerType])(this.record, opts);\r\n        } else {\r\n            tracker.configure(opts);\r\n        }\r\n    }\r\n\r\n    private isAnalyticsConfigured() {\r\n        return this._config && Object.entries(this._config).length > 0;\r\n    }\r\n}\r\n"]}},"error":null,"hash":"dc1f32bea1fbfe774212b5386fbc9b68","cacheData":{"env":{}}}