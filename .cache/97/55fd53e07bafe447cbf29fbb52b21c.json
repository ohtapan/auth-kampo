{"id":"node_modules/@aws-amplify/interactions/lib/Providers/AWSLexProvider.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\interactions\\lib\\Providers\\AWSLexProvider.js.map","includedInParent":true,"mtime":1557861849000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\interactions\\src\\Providers\\AWSLexProvider.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\interactions\\package.json","includedInParent":true,"mtime":1560308010596},{"name":"./InteractionsProvider","loc":{"line":60,"column":37},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\interactions\\lib\\Providers\\AWSLexProvider.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\interactions\\lib\\Providers\\InteractionsProvider.js"},{"name":"aws-sdk/clients/lexruntime","loc":{"line":61,"column":25},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\interactions\\lib\\Providers\\AWSLexProvider.js","resolved":"C:\\home\\auth-kampo\\node_modules\\aws-sdk\\clients\\lexruntime.js"},{"name":"@aws-amplify/core","loc":{"line":62,"column":21},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\interactions\\lib\\Providers\\AWSLexProvider.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"}],"generated":{"js":"\"use strict\";\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InteractionsProvider_1 = require(\"./InteractionsProvider\");\nvar LexRuntime = require(\"aws-sdk/clients/lexruntime\");\nvar core_1 = require(\"@aws-amplify/core\");\nvar logger = new core_1.ConsoleLogger('AWSLexProvider');\nvar AWSLexProvider = /** @class */ (function (_super) {\n    __extends(AWSLexProvider, _super);\n    function AWSLexProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this.aws_lex = new LexRuntime({ region: _this._config.region });\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    AWSLexProvider.prototype.getProviderName = function () { return 'AWSLexProvider'; };\n    AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\n        var _this = this;\n        if (err) {\n            rej(err);\n            return;\n        }\n        else {\n            // Check if state is fulfilled to resolve onFullfilment promise\n            logger.debug('postContent state', data.dialogState);\n            if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\n                    setTimeout(function () { return _this._botsCompleteCallback[botname](null, { slots: data.slots }); }, 0);\n                }\n                if (this._config && typeof this._config[botname].onComplete === 'function') {\n                    setTimeout(function () { return _this._config[botname].onComplete(null, { slots: data.slots }); }, 0);\n                }\n            }\n            res(data);\n            if (data.dialogState === 'Failed') {\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\n                    setTimeout(function () { return _this._botsCompleteCallback[botname]('Bot conversation failed'); }, 0);\n                }\n                if (this._config && typeof this._config[botname].onComplete === 'function') {\n                    setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);\n                }\n            }\n        }\n    };\n    AWSLexProvider.prototype.sendMessage = function (botname, message) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, params;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, rej('Bot ' + botname + ' does not exist')];\n                        }\n                        return [4 /*yield*/, core_1.Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, rej('No credentials')];\n                        }\n                        core_1.AWS.config.update({\n                            credentials: credentials\n                        });\n                        this.aws_lex = new LexRuntime({ region: this._config[botname].region, credentials: credentials });\n                        if (typeof message === 'string') {\n                            params = {\n                                'botAlias': this._config[botname].alias,\n                                'botName': botname,\n                                'inputText': message,\n                                'userId': credentials.identityId,\n                            };\n                            logger.debug('postText to lex', message);\n                            this.aws_lex.postText(params, function (err, data) {\n                                _this.responseCallback(err, data, res, rej, botname);\n                            });\n                        }\n                        else {\n                            if (message.options['messageType'] === 'voice') {\n                                params = {\n                                    'botAlias': this._config[botname].alias,\n                                    'botName': botname,\n                                    'contentType': 'audio/x-l16; sample-rate=16000',\n                                    'inputStream': message.content,\n                                    'userId': credentials.identityId,\n                                    'accept': 'audio/mpeg',\n                                };\n                            }\n                            else {\n                                params = {\n                                    'botAlias': this._config[botname].alias,\n                                    'botName': botname,\n                                    'contentType': 'text/plain; charset=utf-8',\n                                    'inputStream': message.content,\n                                    'userId': credentials.identityId,\n                                    'accept': 'audio/mpeg',\n                                };\n                            }\n                            logger.debug('postContent to lex', message);\n                            this.aws_lex.postContent(params, function (err, data) {\n                                _this.responseCallback(err, data, res, rej, botname);\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AWSLexProvider.prototype.onComplete = function (botname, callback) {\n        if (!this._config[botname]) {\n            throw new ErrorEvent('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    return AWSLexProvider;\n}(InteractionsProvider_1.AbstractInteractionsProvider));\nexports.AWSLexProvider = AWSLexProvider;\n"},"sourceMaps":{"js":{"version":3,"file":"AWSLexProvider.js","sourceRoot":"","sources":["../../src/Providers/AWSLexProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { InteractionsOptions, InteractionsMessage, InteractionsResponse } from '../types';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nimport { registerHelper } from 'handlebars';\n\nconst logger = new Logger('AWSLexProvider');\n\nexport class AWSLexProvider extends AbstractInteractionsProvider {\n\n    private aws_lex: LexRuntime;\n    private _botsCompleteCallback: object;\n\n\n    constructor(options: InteractionsOptions = {}) {\n        super(options);\n        this.aws_lex = new LexRuntime({ region: this._config.region });\n        this._botsCompleteCallback = {};\n    }\n\n    getProviderName() { return 'AWSLexProvider'; }\n\n    responseCallback(err, data, res, rej, botname) {\n        if (err) {\n            rej(err);\n            return;\n\n        } else {\n            // Check if state is fulfilled to resolve onFullfilment promise\n            logger.debug('postContent state', data.dialogState);\n            if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\n                    setTimeout(() => this._botsCompleteCallback[botname](null, { slots: data.slots }), 0);\n                }\n\n                if (this._config && typeof this._config[botname].onComplete === 'function') {\n                    setTimeout(() => this._config[botname].onComplete(null, { slots: data.slots }), 0);\n                }\n            }\n\n            res(data);\n            if (data.dialogState === 'Failed') {\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\n                    setTimeout(\n                        () => this._botsCompleteCallback[botname]('Bot conversation failed'), 0);\n                }\n\n                if (this._config && typeof this._config[botname].onComplete === 'function') {\n                    setTimeout(() => this._config[botname].onComplete('Bot conversation failed'), 0);\n                }\n            }\n        }\n    }\n\n    sendMessage(botname: string, message: string | InteractionsMessage): Promise<object> {\n        return new Promise(async (res, rej) => {\n            if (!this._config[botname]) {\n                return rej('Bot ' + botname + ' does not exist');\n            }\n            const credentials = await Credentials.get();\n            if (!credentials) { return rej('No credentials'); }\n            AWS.config.update({\n                credentials\n            });\n\n            this.aws_lex = new LexRuntime({ region: this._config[botname].region, credentials });\n\n            let params;\n            if (typeof message === 'string') {\n                params = {\n                    'botAlias': this._config[botname].alias,\n                    'botName': botname,\n                    'inputText': message,\n                    'userId': credentials.identityId,\n                };\n\n                logger.debug('postText to lex', message);\n\n                this.aws_lex.postText(params, (err, data) => {\n                    this.responseCallback(err, data, res, rej, botname);\n                });\n            } else {\n                if (message.options['messageType'] === 'voice') {\n                    params = {\n                        'botAlias': this._config[botname].alias,\n                        'botName': botname,\n                        'contentType': 'audio/x-l16; sample-rate=16000',\n                        'inputStream': message.content,\n                        'userId': credentials.identityId,\n                        'accept': 'audio/mpeg',\n                    };\n                } else {\n                    params = {\n                        'botAlias': this._config[botname].alias,\n                        'botName': botname,\n                        'contentType': 'text/plain; charset=utf-8',\n                        'inputStream': message.content,\n                        'userId': credentials.identityId,\n                        'accept': 'audio/mpeg',\n                    };\n                }\n\n                logger.debug('postContent to lex', message);\n\n                this.aws_lex.postContent(params, (err, data) => {\n                    this.responseCallback(err, data, res, rej, botname);\n                });\n            }\n        });\n    }\n\n    onComplete(botname: string, callback) {\n        if (!this._config[botname]) {\n            throw new ErrorEvent('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    }\n}\n\n"]}},"error":null,"hash":"195aaea44c982a16e54f178f8e2e34ba","cacheData":{"env":{}}}