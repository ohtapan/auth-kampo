{"id":"node_modules/@aws-amplify/core/lib/Signer.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Signer.js.map","includedInParent":true,"mtime":1557861835000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\src\\Signer.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\package.json","includedInParent":true,"mtime":1560308010599},{"name":"./Logger","loc":{"line":32,"column":23},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Signer.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Logger\\index.js"},{"name":"./Facet","loc":{"line":33,"column":22},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Signer.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Facet.js"},{"name":"url","loc":{"line":34,"column":65},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Signer.js","resolved":"C:\\home\\auth-kampo\\node_modules\\url\\url.js"}],"generated":{"js":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Logger_1 = require(\"./Logger\");\nvar Facet_1 = require(\"./Facet\");\nvar logger = new Logger_1.ConsoleLogger('Signer'), url = require('url'), crypto = Facet_1.AWS['util'].crypto;\nvar DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\nvar encrypt = function (key, src, encoding) {\n    return crypto.lib.createHmac('sha256', key).update(src, 'utf8').digest(encoding);\n};\nvar hash = function (src) {\n    var arg = src || '';\n    return crypto.createHash('sha256').update(arg, 'utf8').digest('hex');\n};\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\nvar escape_RFC3986 = function (component) {\n    return component.replace(/[!'()*]/g, function (c) {\n        return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n};\n/**\n * @private\n * Create canonical query string\n *\n*/\nvar canonical_query = function (query) {\n    if (!query || query.length === 0) {\n        return '';\n    }\n    return query.split('&')\n        .map(function (e) {\n        var key_val = e.split('=');\n        if (key_val.length === 1) {\n            return e;\n        }\n        else {\n            var reencoded_val = escape_RFC3986(key_val[1]);\n            return key_val[0] + '=' + reencoded_val;\n        }\n    }).sort(function (a, b) { return a < b ? -1 : 1; }).join('&');\n};\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\nvar canonical_headers = function (headers) {\n    if (!headers || Object.keys(headers).length === 0) {\n        return '';\n    }\n    return Object.keys(headers)\n        .map(function (key) {\n        return {\n            key: key.toLowerCase(),\n            value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : ''\n        };\n    })\n        .sort(function (a, b) {\n        return a.key < b.key ? -1 : 1;\n    })\n        .map(function (item) {\n        return item.key + ':' + item.value;\n    })\n        .join('\\n') + '\\n';\n};\n/**\n* List of header keys included in the canonical headers.\n* @access private\n*/\nvar signed_headers = function (headers) {\n    return Object.keys(headers)\n        .map(function (key) { return key.toLowerCase(); })\n        .sort()\n        .join(';');\n};\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\nvar canonical_request = function (request) {\n    var url_info = url.parse(request.url);\n    return [\n        request.method || '/',\n        encodeURIComponent(url_info.pathname).replace(/%2F/ig, '/'),\n        canonical_query(url_info.query),\n        canonical_headers(request.headers),\n        signed_headers(request.headers),\n        hash(request.data)\n    ].join('\\n');\n};\nvar parse_service_info = function (request) {\n    var url_info = url.parse(request.url), host = url_info.host;\n    var matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n    var parsed = (matched || []).slice(1, 3);\n    if (parsed[1] === 'es') { // Elastic Search\n        parsed = parsed.reverse();\n    }\n    return {\n        service: request.service || parsed[0],\n        region: request.region || parsed[1]\n    };\n};\nvar credential_scope = function (d_str, region, service) {\n    return [\n        d_str,\n        region,\n        service,\n        'aws4_request',\n    ].join('/');\n};\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\nvar string_to_sign = function (algorithm, canonical_request, dt_str, scope) {\n    return [\n        algorithm,\n        dt_str,\n        scope,\n        hash(canonical_request)\n    ].join('\\n');\n};\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\nvar get_signing_key = function (secret_key, d_str, service_info) {\n    logger.debug(service_info);\n    var k = ('AWS4' + secret_key), k_date = encrypt(k, d_str), k_region = encrypt(k_date, service_info.region), k_service = encrypt(k_region, service_info.service), k_signing = encrypt(k_service, 'aws4_request');\n    return k_signing;\n};\nvar get_signature = function (signing_key, str_to_sign) {\n    return encrypt(signing_key, str_to_sign, 'hex');\n};\n/**\n* @private\n* Create authorization header\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n*/\nvar get_authorization_header = function (algorithm, access_key, scope, signed_headers, signature) {\n    return [\n        algorithm + ' ' + 'Credential=' + access_key + '/' + scope,\n        'SignedHeaders=' + signed_headers,\n        'Signature=' + signature\n    ].join(', ');\n};\n/**\n* Sign a HTTP request, add 'Authorization' header to request param\n* @method sign\n* @memberof Signer\n* @static\n*\n* @param {object} request - HTTP request object\n<pre>\nrequest: {\n    method: GET | POST | PUT ...\n    url: ...,\n    headers: {\n        header1: ...\n    },\n    data: data\n}\n</pre>\n* @param {object} access_info - AWS access credential info\n<pre>\naccess_info: {\n    access_key: ...,\n    secret_key: ...,\n    session_token: ...\n}\n</pre>\n* @param {object} [service_info] - AWS service type and region, optional,\n*                                  if not provided then parse out from url\n<pre>\nservice_info: {\n    service: ...,\n    region: ...\n}\n</pre>\n*\n* @returns {object} Signed HTTP request\n*/\nvar sign = function (request, access_info, service_info) {\n    if (service_info === void 0) { service_info = null; }\n    request.headers = request.headers || {};\n    // datetime string and date string\n    var dt = new Date(), dt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''), d_str = dt_str.substr(0, 8);\n    var url_info = url.parse(request.url);\n    request.headers['host'] = url_info.host;\n    request.headers['x-amz-date'] = dt_str;\n    if (access_info.session_token) {\n        request.headers['X-Amz-Security-Token'] = access_info.session_token;\n    }\n    // Task 1: Create a Canonical Request\n    var request_str = canonical_request(request);\n    logger.debug(request_str);\n    // Task 2: Create a String to Sign\n    var serviceInfo = service_info || parse_service_info(request), scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service), str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope);\n    // Task 3: Calculate the Signature\n    var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo), signature = get_signature(signing_key, str_to_sign);\n    // Task 4: Adding the Signing information to the Request\n    var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);\n    request.headers['Authorization'] = authorization_header;\n    return request;\n};\nvar signUrl = function (urlToSign, accessInfo, serviceInfo, expiration) {\n    var now = new Date().toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    var today = now.substr(0, 8);\n    // Intentionally discarding search\n    var _a = url.parse(urlToSign, true, true), search = _a.search, parsedUrl = __rest(_a, [\"search\"]);\n    var host = parsedUrl.host;\n    var signedHeaders = { host: host };\n    var _b = serviceInfo || parse_service_info({ url: url.format(parsedUrl) }), region = _b.region, service = _b.service;\n    var credentialScope = credential_scope(today, region, service);\n    // IoT service does not allow the session token in the canonical request\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;\n    var queryParams = __assign({ 'X-Amz-Algorithm': DEFAULT_ALGORITHM, 'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'), 'X-Amz-Date': now.substr(0, 16) }, (sessionTokenRequired ? { 'X-Amz-Security-Token': \"\" + accessInfo.session_token } : {}), (expiration ? { 'X-Amz-Expires': \"\" + expiration } : {}), { 'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(',') });\n    var canonicalRequest = canonical_request({\n        method: 'GET',\n        url: url.format(__assign({}, parsedUrl, { query: __assign({}, parsedUrl.query, queryParams) })),\n        headers: signedHeaders,\n    });\n    var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);\n    var signing_key = get_signing_key(accessInfo.secret_key, today, { region: region, service: service });\n    var signature = get_signature(signing_key, stringToSign);\n    var additionalQueryParams = __assign({ 'X-Amz-Signature': signature }, (accessInfo.session_token && { 'X-Amz-Security-Token': accessInfo.session_token }));\n    var result = url.format({\n        protocol: parsedUrl.protocol,\n        slashes: true,\n        hostname: parsedUrl.hostname,\n        pathname: parsedUrl.pathname,\n        query: __assign({}, parsedUrl.query, queryParams, additionalQueryParams)\n    });\n    return result;\n};\n/**\n* AWS request signer.\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html|Signature Version 4}\n*\n* @class Signer\n*/\nvar Signer = /** @class */ (function () {\n    function Signer() {\n    }\n    Signer.sign = sign;\n    Signer.signUrl = signUrl;\n    return Signer;\n}());\nexports.default = Signer;\n"},"sourceMaps":{"js":{"version":3,"file":"Signer.js","sourceRoot":"","sources":["../src/Signer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { AWS } from './Facet';\n\nconst logger = new Logger('Signer'),\n    url = require('url'),\n    crypto = AWS['util'].crypto;\n\nconst DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nconst IOT_SERVICE_NAME = 'iotdevicegateway';\n\nconst encrypt = function(key, src, encoding?) {\n    return crypto.lib.createHmac('sha256', key).update(src, 'utf8').digest(encoding);\n};\n\nconst hash = function(src) {\n    const arg = src || '';\n    return crypto.createHash('sha256').update(arg, 'utf8').digest('hex');\n};\n\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\nconst escape_RFC3986 = function(component) {\n    return component.replace(/[!'()*]/g, function(c) {\n        return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n};\n\n/**\n * @private\n * Create canonical query string\n *\n*/\nconst canonical_query = function(query) {\n    if (!query || query.length === 0) { return ''; }\n\n    return query.split('&')\n        .map(e => {\n            const key_val = e.split('=');\n\n            if(key_val.length === 1) {\n                return e;\n            } else {\n                const reencoded_val = escape_RFC3986(key_val[1]);\n                return key_val[0] + '=' + reencoded_val;\n            }\n        }).sort((a, b) => a < b ? -1 : 1).join('&');\n};\n\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\nconst canonical_headers = function(headers) {\n    if (!headers || Object.keys(headers).length === 0) { return ''; }\n\n    return Object.keys(headers)\n        .map(function(key) {\n            return {\n                key: key.toLowerCase(),\n                value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : ''\n            };\n        })\n        .sort(function(a, b) {\n            return a.key < b.key ? -1 : 1;\n        })\n        .map(function(item) {\n            return item.key + ':' + item.value;\n        })\n        .join('\\n') + '\\n';\n};\n\n/**\n* List of header keys included in the canonical headers.\n* @access private\n*/\nconst signed_headers = function(headers) {\n    return Object.keys(headers)\n        .map(function(key) { return key.toLowerCase(); })\n        .sort()\n        .join(';');\n};\n\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\nconst canonical_request = function(request) {\n    const url_info = url.parse(request.url);\n\n    return [\n        request.method || '/',\n        encodeURIComponent(url_info.pathname).replace(/%2F/ig, '/'),\n        canonical_query(url_info.query),\n        canonical_headers(request.headers),\n        signed_headers(request.headers),\n        hash(request.data)\n    ].join('\\n');\n};\n\nconst parse_service_info = function(request) {\n    const url_info = url.parse(request.url),\n        host = url_info.host;\n\n    const matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n    let parsed = (matched || []).slice(1, 3);\n\n    if (parsed[1] === 'es') { // Elastic Search\n        parsed = parsed.reverse();\n    }\n\n    return {\n        service: request.service || parsed[0],\n        region: request.region || parsed[1]\n    };\n};\n\nconst credential_scope = function(d_str, region, service) {\n    return [\n        d_str,\n        region,\n        service,\n        'aws4_request',\n    ].join('/');\n};\n\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\nconst string_to_sign = function(algorithm, canonical_request, dt_str, scope) {\n    return [\n        algorithm,\n        dt_str,\n        scope,\n        hash(canonical_request)\n    ].join('\\n');\n};\n\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\nconst get_signing_key = function(secret_key, d_str, service_info) {\n    logger.debug(service_info);\n    const k = ('AWS4' + secret_key),\n        k_date = encrypt(k, d_str),\n        k_region = encrypt(k_date, service_info.region),\n        k_service = encrypt(k_region, service_info.service),\n        k_signing = encrypt(k_service, 'aws4_request');\n\n    return k_signing;\n};\n\nconst get_signature = function(signing_key, str_to_sign) {\n    return encrypt(signing_key, str_to_sign, 'hex');\n};\n\n/**\n* @private\n* Create authorization header\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n*/\nconst get_authorization_header = function(algorithm, access_key, scope, signed_headers, signature) {\n    return [\n        algorithm + ' ' + 'Credential=' + access_key + '/' + scope,\n        'SignedHeaders=' + signed_headers,\n        'Signature=' + signature\n    ].join(', ');\n};\n\n/**\n* Sign a HTTP request, add 'Authorization' header to request param\n* @method sign\n* @memberof Signer\n* @static\n*\n* @param {object} request - HTTP request object\n<pre>\nrequest: {\n    method: GET | POST | PUT ...\n    url: ...,\n    headers: {\n        header1: ...\n    },\n    data: data\n}\n</pre>\n* @param {object} access_info - AWS access credential info\n<pre>\naccess_info: {\n    access_key: ...,\n    secret_key: ...,\n    session_token: ...\n}\n</pre>\n* @param {object} [service_info] - AWS service type and region, optional,\n*                                  if not provided then parse out from url\n<pre>\nservice_info: {\n    service: ...,\n    region: ...\n}\n</pre>\n*\n* @returns {object} Signed HTTP request\n*/\nconst sign = function(request, access_info, service_info = null) {\n    request.headers = request.headers || {};\n\n    // datetime string and date string\n    const dt = new Date(),\n        dt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''),\n        d_str = dt_str.substr(0, 8);\n\n    const url_info = url.parse(request.url);\n    request.headers['host'] = url_info.host;\n    request.headers['x-amz-date'] = dt_str;\n    if (access_info.session_token) {\n        request.headers['X-Amz-Security-Token'] = access_info.session_token;\n    }\n\n    // Task 1: Create a Canonical Request\n    const request_str = canonical_request(request);\n    logger.debug(request_str);\n\n    // Task 2: Create a String to Sign\n    const serviceInfo = service_info || parse_service_info(request),\n        scope = credential_scope(\n            d_str,\n            serviceInfo.region,\n            serviceInfo.service\n        ),\n        str_to_sign = string_to_sign(\n            DEFAULT_ALGORITHM,\n            request_str,\n            dt_str,\n            scope\n        );\n\n    // Task 3: Calculate the Signature\n    const signing_key = get_signing_key(\n        access_info.secret_key,\n        d_str,\n        serviceInfo\n    ),\n        signature = get_signature(signing_key, str_to_sign);\n\n    // Task 4: Adding the Signing information to the Request\n    const authorization_header = get_authorization_header(\n        DEFAULT_ALGORITHM,\n        access_info.access_key,\n        scope,\n        signed_headers(request.headers),\n        signature\n    );\n    request.headers['Authorization'] = authorization_header;\n\n    return request;\n};\n\nconst signUrl = function(urlToSign: String, accessInfo: any, serviceInfo?: any, expiration?: Number) {\n    const now = new Date().toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    const today = now.substr(0, 8);\n    // Intentionally discarding search\n    const {search, ...parsedUrl} = url.parse(urlToSign, true, true);\n    const { host } = parsedUrl;\n    const signedHeaders = { host };\n\n    const { region, service } = serviceInfo || parse_service_info({ url: url.format(parsedUrl) });\n    const credentialScope = credential_scope(\n        today,\n        region,\n        service\n    );\n\n    // IoT service does not allow the session token in the canonical request\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    const sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;\n    const queryParams = {\n        'X-Amz-Algorithm': DEFAULT_ALGORITHM,\n        'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'),\n        'X-Amz-Date': now.substr(0, 16),\n        ...(sessionTokenRequired ? { 'X-Amz-Security-Token': `${accessInfo.session_token}` } : {}),\n        ...(expiration ? { 'X-Amz-Expires': `${expiration}` } : {}),\n        'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(','),\n    };\n\n    const canonicalRequest = canonical_request({\n        method: 'GET',\n        url: url.format({\n            ...parsedUrl,\n            query: {\n                ...parsedUrl.query,\n                ...queryParams\n            },\n        }),\n        headers: signedHeaders,\n    });\n\n    const stringToSign = string_to_sign(\n        DEFAULT_ALGORITHM,\n        canonicalRequest,\n        now,\n        credentialScope\n    );\n\n    const signing_key = get_signing_key(\n        accessInfo.secret_key,\n        today,\n        { region, service },\n    );\n    const signature = get_signature(signing_key, stringToSign);\n\n    const additionalQueryParams = {\n        'X-Amz-Signature': signature,\n        ...(accessInfo.session_token && { 'X-Amz-Security-Token': accessInfo.session_token }),\n    };\n\n    const result = url.format({\n        protocol: parsedUrl.protocol,\n        slashes: true,\n        hostname: parsedUrl.hostname,\n        pathname: parsedUrl.pathname,\n        query: {\n            ...parsedUrl.query,\n            ...queryParams,\n            ...additionalQueryParams,\n        }\n    });\n\n    return result;\n};\n\n/**\n* AWS request signer.\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html|Signature Version 4}\n*\n* @class Signer\n*/\nexport default class Signer {\n    static sign = sign;\n    static signUrl = signUrl;\n}\n"]}},"error":null,"hash":"4edcd2537d9b8586d5f4fdedaab4842c","cacheData":{"env":{}}}