{"id":"node_modules/@aws-amplify/analytics/lib/vendor/dom-utils/parents.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\vendor\\dom-utils\\parents.js.map","includedInParent":true,"mtime":1557861886000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\src\\vendor\\dom-utils\\parents.ts","includedInParent":true,"mtime":1557861738000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\package.json","includedInParent":true,"mtime":1560308010598}],"generated":{"js":"\"use strict\";\n/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns an array of a DOM element's parent elements.\n * @param {!Element} element The DOM element whose parents to get.\n * @return {!Array} An array of all parent elemets, or an empty array if no\n *     parent elements are found.\n */\nfunction parents(ele) {\n    var list = [];\n    var element = ele;\n    while (element && element.parentNode && element.parentNode.nodeType === 1) {\n        element = /** @type {!Element} */ (element.parentNode);\n        list.push(element);\n    }\n    return list;\n}\nexports.default = parents;\n"},"sourceMaps":{"js":{"version":3,"file":"parents.js","sourceRoot":"","sources":["../../../src/vendor/dom-utils/parents.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAEH;;;;;GAKG;AACH,iBAAgC,GAAG;IACjC,IAAM,IAAI,GAAG,EAAE,CAAC;IAChB,IAAI,OAAO,GAAG,GAAG,CAAC;IAClB,OAAO,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,QAAQ,KAAK,CAAC,EAAE;QACzE,OAAO,GAAG,uBAAuB,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACpB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AARD,0BAQC","sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n\n/**\n * Returns an array of a DOM element's parent elements.\n * @param {!Element} element The DOM element whose parents to get.\n * @return {!Array} An array of all parent elemets, or an empty array if no\n *     parent elements are found.\n */\nexport default function parents(ele) {\n  const list = [];\n  let element = ele;\n  while (element && element.parentNode && element.parentNode.nodeType === 1) {\n    element = /** @type {!Element} */ (element.parentNode);\n    list.push(element);\n  }\n  return list;\n}\n"]}},"error":null,"hash":"219ae94c3394622310153ff39f6c8ae7","cacheData":{"env":{}}}