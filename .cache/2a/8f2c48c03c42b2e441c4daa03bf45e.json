{"id":"node_modules/@aws-amplify/storage/lib/Storage.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\lib\\Storage.js.map","includedInParent":true,"mtime":1557861857000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\src\\Storage.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\package.json","includedInParent":true,"mtime":1560308010595},{"name":"@aws-amplify/core","loc":{"line":58,"column":21},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\lib\\Storage.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"},{"name":"./Providers/AWSS3Provider","loc":{"line":59,"column":30},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\lib\\Storage.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\lib\\Providers\\AWSS3Provider.js"}],"generated":{"js":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@aws-amplify/core\");\nvar AWSS3Provider_1 = require(\"./Providers/AWSS3Provider\");\nvar logger = new core_1.ConsoleLogger('StorageClass');\nvar DEFAULT_PROVIDER = 'AWSS3';\n/**\n * Provide storage methods to use AWS S3\n */\nvar StorageClass = /** @class */ (function () {\n    /**\n     * Initialize Storage\n     * @param {Object} config - Configuration object for storage\n     */\n    function StorageClass() {\n        this._config = {};\n        this._pluggables = [];\n        logger.debug('Storage Options', this._config);\n        this.get = this.get.bind(this);\n        this.put = this.put.bind(this);\n        this.remove = this.remove.bind(this);\n        this.list = this.list.bind(this);\n    }\n    StorageClass.prototype.getModuleName = function () {\n        return 'Storage';\n    };\n    /**\n     * add plugin into Storage category\n     * @param {Object} pluggable - an instance of the plugin\n     */\n    StorageClass.prototype.addPluggable = function (pluggable) {\n        if (pluggable && pluggable.getCategory() === 'Storage') {\n            this._pluggables.push(pluggable);\n            var config = {};\n            config = pluggable.configure(this._config[pluggable.getProviderName()]);\n            return config;\n        }\n    };\n    /**\n     * Get the plugin object\n     * @param providerName - the name of the plugin\n     */\n    StorageClass.prototype.getPluggable = function (providerName) {\n        var pluggable = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === providerName; });\n        if (pluggable === undefined) {\n            logger.debug('No plugin found with providerName', providerName);\n            return null;\n        }\n        else\n            return pluggable;\n    };\n    /**\n     * Remove the plugin object\n     * @param providerName - the name of the plugin\n     */\n    StorageClass.prototype.removePluggable = function (providerName) {\n        this._pluggables = this._pluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\n        return;\n    };\n    /**\n     * Configure Storage\n     * @param {Object} config - Configuration object for storage\n     * @return {Object} - Current configuration\n     */\n    StorageClass.prototype.configure = function (config) {\n        var _this = this;\n        logger.debug('configure Storage');\n        if (!config)\n            return this._config;\n        var amplifyConfig = core_1.Parser.parseMobilehubConfig(config);\n        var _a = amplifyConfig.Storage, bucket = _a.bucket, region = _a.region, level = _a.level, track = _a.track, customPrefix = _a.customPrefix;\n        // Update DEFAULT_PROVIDER with defined attributes bucket, region, level, track, customPrefix if exists \n        // on amplifyConfig.Storage, backwards compatible issue \n        if ((bucket || region || level || track || customPrefix) && !amplifyConfig.Storage[DEFAULT_PROVIDER]) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER] = {};\n        }\n        if (bucket) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].bucket = bucket;\n            delete amplifyConfig.Storage['bucket'];\n        }\n        if (region) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].region = region;\n            delete amplifyConfig.Storage['region'];\n        }\n        if (level) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].level = level;\n            delete amplifyConfig.Storage['level'];\n        }\n        if (track) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].track = track;\n            delete amplifyConfig.Storage['track'];\n        }\n        if (customPrefix) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].customPrefix = customPrefix;\n            delete amplifyConfig.Storage['customPrefix'];\n        }\n        // only update new values for each provider\n        Object.keys(amplifyConfig.Storage).forEach(function (providerName) {\n            if (typeof amplifyConfig.Storage[providerName] !== 'string') {\n                _this._config[providerName] = __assign({}, _this._config[providerName], amplifyConfig.Storage[providerName]);\n            }\n        });\n        this._pluggables.forEach(function (pluggable) {\n            pluggable.configure(_this._config[pluggable.getProviderName()]);\n        });\n        if (this._pluggables.length === 0) {\n            this.addPluggable(new AWSS3Provider_1.default());\n        }\n        return this._config;\n    };\n    /**\n    * Get a presigned URL of the file or the object data when download:true\n    *\n    * @param {String} key - key of the object\n    * @param {Object} [config] - { level : private|protected|public, download: true|false }\n    * @return - A promise resolves to either a presigned url or the object\n    */\n    StorageClass.prototype.get = function (key, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, provider, prov;\n            return __generator(this, function (_b) {\n                _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;\n                prov = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === provider; });\n                if (prov === undefined) {\n                    logger.debug('No plugin found with providerName', provider);\n                    Promise.reject('No plugin found in Storage for the provider');\n                }\n                return [2 /*return*/, prov.get(key, config)];\n            });\n        });\n    };\n    /**\n     * Put a file in storage bucket specified to configure method\n     * @param {String} key - key of the object\n     * @param {Object} object - File to be put in bucket\n     * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n     *  progressCallback: function }\n     * @return - promise resolves to object on success\n     */\n    StorageClass.prototype.put = function (key, object, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, provider, prov;\n            return __generator(this, function (_b) {\n                _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;\n                prov = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === provider; });\n                if (prov === undefined) {\n                    logger.debug('No plugin found with providerName', provider);\n                    Promise.reject('No plugin found in Storage for the provider');\n                }\n                return [2 /*return*/, prov.put(key, object, config)];\n            });\n        });\n    };\n    /**\n     * Remove the object for specified key\n     * @param {String} key - key of the object\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves upon successful removal of the object\n     */\n    StorageClass.prototype.remove = function (key, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, provider, prov;\n            return __generator(this, function (_b) {\n                _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;\n                prov = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === provider; });\n                if (prov === undefined) {\n                    logger.debug('No plugin found with providerName', provider);\n                    Promise.reject('No plugin found in Storage for the provider');\n                }\n                return [2 /*return*/, prov.remove(key, config)];\n            });\n        });\n    };\n    /**\n     * List bucket objects relative to the level and prefix specified\n     * @param {String} path - the path that contains objects\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves to list of keys for all objects in path\n     */\n    StorageClass.prototype.list = function (path, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, provider, prov;\n            return __generator(this, function (_b) {\n                _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;\n                prov = this._pluggables.find(function (pluggable) { return pluggable.getProviderName() === provider; });\n                if (prov === undefined) {\n                    logger.debug('No plugin found with providerName', provider);\n                    Promise.reject('No plugin found in Storage for the provider');\n                }\n                return [2 /*return*/, prov.list(path, config)];\n            });\n        });\n    };\n    return StorageClass;\n}());\nexports.default = StorageClass;\n"},"sourceMaps":{"js":{"version":3,"file":"Storage.js","sourceRoot":"","sources":["../src/Storage.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger, Parser } from '@aws-amplify/core';\nimport AWSS3Provider from './Providers/AWSS3Provider';\nimport { StorageProvider } from './types';\n\nconst logger = new Logger('StorageClass');\n\nconst DEFAULT_PROVIDER = 'AWSS3';\n/**\n * Provide storage methods to use AWS S3\n */\nexport default class StorageClass {\n    /**\n     * @private\n     */\n    private _config;\n    private _pluggables: StorageProvider[];\n\n\n    /**\n     * @public\n     */\n    public vault: StorageClass;\n\n    /**\n     * Initialize Storage\n     * @param {Object} config - Configuration object for storage\n     */\n    constructor() {\n        this._config = {};\n        this._pluggables = [];\n        logger.debug('Storage Options', this._config);\n\n        this.get = this.get.bind(this);\n        this.put = this.put.bind(this);\n        this.remove = this.remove.bind(this);\n        this.list = this.list.bind(this);\n    }\n\n    public getModuleName() {\n        return 'Storage';\n    }\n\n    /**\n     * add plugin into Storage category\n     * @param {Object} pluggable - an instance of the plugin\n     */\n    public addPluggable(pluggable: StorageProvider) {\n        if (pluggable && pluggable.getCategory() === 'Storage') {\n            this._pluggables.push(pluggable);\n            let config = {};\n            \n            config = pluggable.configure(this._config[pluggable.getProviderName()]);\n            \n            return config;\n        }\n    }\n\n    /**\n     * Get the plugin object\n     * @param providerName - the name of the plugin\n     */\n    public getPluggable(providerName: string) {\n        const pluggable = this._pluggables.find(pluggable => pluggable.getProviderName() === providerName);\n        if (pluggable === undefined) {\n            logger.debug('No plugin found with providerName', providerName);\n            return null;\n        } else\n            return pluggable;\n    }\n\n    /**\n     * Remove the plugin object\n     * @param providerName - the name of the plugin\n     */\n    public removePluggable(providerName: string) {\n        this._pluggables = this._pluggables.filter(pluggable => pluggable.getProviderName() !== providerName);\n        return;\n    }\n\n    /**\n     * Configure Storage\n     * @param {Object} config - Configuration object for storage\n     * @return {Object} - Current configuration\n     */\n    configure(config?) {\n        logger.debug('configure Storage');\n        if (!config) return this._config;\n\n        const amplifyConfig = Parser.parseMobilehubConfig(config);\n        const { bucket, region, level, track, customPrefix } = amplifyConfig.Storage as any;\n        // Update DEFAULT_PROVIDER with defined attributes bucket, region, level, track, customPrefix if exists \n        // on amplifyConfig.Storage, backwards compatible issue \n        if ((bucket || region || level || track || customPrefix) && !amplifyConfig.Storage[DEFAULT_PROVIDER]) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER] = {};\n        }\n        if (bucket) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].bucket = bucket;\n            delete amplifyConfig.Storage['bucket'];\n        }\n        if (region) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].region = region;\n            delete amplifyConfig.Storage['region'];\n        }\n        if (level) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].level = level;\n            delete amplifyConfig.Storage['level'];\n        }\n        if (track) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].track = track;\n            delete amplifyConfig.Storage['track'];\n        }\n        if (customPrefix) {\n            amplifyConfig.Storage[DEFAULT_PROVIDER].customPrefix = customPrefix;\n            delete amplifyConfig.Storage['customPrefix'];\n        }\n\n        // only update new values for each provider\n        Object.keys(amplifyConfig.Storage).forEach((providerName) => {\n            if (typeof amplifyConfig.Storage[providerName] !== 'string') {\n                this._config[providerName] = { ...this._config[providerName], ...amplifyConfig.Storage[providerName] };\n            }\n        });\n\n        this._pluggables.forEach((pluggable) => {\n            pluggable.configure(this._config[pluggable.getProviderName()]);\n        });\n\n        if (this._pluggables.length === 0) {\n            this.addPluggable(new AWSS3Provider());\n        }\n\n        return this._config;\n    }\n\n    /**\n    * Get a presigned URL of the file or the object data when download:true\n    *\n    * @param {String} key - key of the object\n    * @param {Object} [config] - { level : private|protected|public, download: true|false }\n    * @return - A promise resolves to either a presigned url or the object\n    */\n    public async get(key: string, config?): Promise<String | Object> {\n\n        const { provider = DEFAULT_PROVIDER } = config || {};\n        const prov = this._pluggables.find(pluggable => pluggable.getProviderName() === provider);\n        if (prov === undefined) {\n            logger.debug('No plugin found with providerName', provider);\n            Promise.reject('No plugin found in Storage for the provider');\n        }\n        return prov.get(key, config);\n    }\n\n    /**\n     * Put a file in storage bucket specified to configure method\n     * @param {String} key - key of the object\n     * @param {Object} object - File to be put in bucket\n     * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n     *  progressCallback: function }\n     * @return - promise resolves to object on success\n     */\n    public async put(key: string, object, config?): Promise<Object> {\n        const { provider = DEFAULT_PROVIDER } = config || {};\n        const prov = this._pluggables.find(pluggable => pluggable.getProviderName() === provider);\n        if (prov === undefined) {\n            logger.debug('No plugin found with providerName', provider);\n            Promise.reject('No plugin found in Storage for the provider');\n        }\n        return prov.put(key, object, config);\n    }\n\n    /**\n     * Remove the object for specified key\n     * @param {String} key - key of the object\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves upon successful removal of the object\n     */\n    public async remove(key: string, config?): Promise<any> {\n        const { provider = DEFAULT_PROVIDER } = config || {};\n        const prov = this._pluggables.find(pluggable => pluggable.getProviderName() === provider);\n        if (prov === undefined) {\n            logger.debug('No plugin found with providerName', provider);\n            Promise.reject('No plugin found in Storage for the provider');\n        }\n        return prov.remove(key, config);\n    }\n\n    /**\n     * List bucket objects relative to the level and prefix specified\n     * @param {String} path - the path that contains objects\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves to list of keys for all objects in path\n     */\n    public async list(path, config?): Promise<any> {\n        const { provider = DEFAULT_PROVIDER } = config || {};\n        const prov = this._pluggables.find(pluggable => pluggable.getProviderName() === provider);\n        if (prov === undefined) {\n            logger.debug('No plugin found with providerName', provider);\n            Promise.reject('No plugin found in Storage for the provider');\n        }\n        return prov.list(path, config);\n    }\n}\n"]}},"error":null,"hash":"4e9dc906744a73d845a09200381a01f1","cacheData":{"env":{}}}