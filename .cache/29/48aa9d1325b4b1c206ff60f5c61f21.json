{"id":"node_modules/@aws-amplify/cache/lib/InMemoryCache.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\InMemoryCache.js.map","includedInParent":true,"mtime":1557861850000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\src\\InMemoryCache.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\package.json","includedInParent":true,"mtime":1560308010599},{"name":"./Utils","loc":{"line":25,"column":22},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\InMemoryCache.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\Utils\\index.js"},{"name":"./StorageCache","loc":{"line":26,"column":29},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\InMemoryCache.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\StorageCache.js"},{"name":"@aws-amplify/core","loc":{"line":27,"column":21},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\InMemoryCache.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"}],"generated":{"js":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Utils_1 = require(\"./Utils\");\nvar StorageCache_1 = require(\"./StorageCache\");\nvar core_1 = require(\"@aws-amplify/core\");\nvar logger = new core_1.ConsoleLogger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCache = /** @class */ (function (_super) {\n    __extends(InMemoryCache, _super);\n    /**\n     * initialize the cache\n     *\n     * @param config - the configuration of the cache\n     */\n    function InMemoryCache(config) {\n        var _this = this;\n        var cacheConfig = config ? Object.assign({}, Utils_1.defaultConfig, config) : Utils_1.defaultConfig;\n        _this = _super.call(this, cacheConfig) || this;\n        logger.debug('now we start!');\n        _this.cacheList = [];\n        _this.curSizeInBytes = 0;\n        _this.maxPriority = 5;\n        _this.getItem = _this.getItem.bind(_this);\n        _this.setItem = _this.setItem.bind(_this);\n        _this.removeItem = _this.removeItem.bind(_this);\n        // initialize list for every priority\n        for (var i = 0; i < _this.maxPriority; i += 1) {\n            _this.cacheList[i] = new Utils_1.CacheList();\n        }\n        return _this;\n    }\n    /**\n     * decrease current size of the cache\n     *\n     * @param amount - the amount of the cache size which needs to be decreased\n     */\n    InMemoryCache.prototype._decreaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes -= amount;\n    };\n    /**\n     * increase current size of the cache\n     *\n     * @param amount - the amount of the cache szie which need to be increased\n     */\n    InMemoryCache.prototype._increaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes += amount;\n    };\n    /**\n     * check whether item is expired\n     *\n     * @param key - the key of the item\n     *\n     * @return true if the item is expired.\n     */\n    InMemoryCache.prototype._isExpired = function (key) {\n        var text = Utils_1.CacheObject.getItem(key);\n        var item = JSON.parse(text);\n        if (Utils_1.getCurrTime() >= item.expires) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * delete item from cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCache.prototype._removeItem = function (prefixedKey, listIdx) {\n        // delete the key from the list\n        this.cacheList[listIdx].removeItem(prefixedKey);\n        // decrease the current size of the cache\n        this._decreaseCurSizeInBytes(JSON.parse(Utils_1.CacheObject.getItem(prefixedKey)).byteSize);\n        // finally remove the item from memory\n        Utils_1.CacheObject.removeItem(prefixedKey);\n    };\n    /**\n     * put item into cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param itemData - the value of the item\n     * @param itemSizeInBytes - the byte size of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCache.prototype._setItem = function (prefixedKey, item, listIdx) {\n        // insert the key into the list\n        this.cacheList[listIdx].insertItem(prefixedKey);\n        // increase the current size of the cache\n        this._increaseCurSizeInBytes(item.byteSize);\n        // finally add the item into memory\n        Utils_1.CacheObject.setItem(prefixedKey, JSON.stringify(item));\n    };\n    /**\n     * see whether cache is full\n     *\n     * @param itemSize\n     *\n     * @return true if cache is full\n     */\n    InMemoryCache.prototype._isCacheFull = function (itemSize) {\n        return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n    };\n    /**\n     * check whether the cache contains the key\n     *\n     * @param key\n     */\n    InMemoryCache.prototype.containsKey = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            if (this.cacheList[i].containsKey(prefixedKey)) {\n                return i + 1;\n            }\n        }\n        return -1;\n    };\n    /**\n     * * Set item into cache. You can put number, string, boolean or object.\n     * The cache will first check whether has the same key.\n     * If it has, it will delete the old item and then put the new item in\n     * The cache will pop out items if it is full\n     * You can specify the cache item options. The cache will abort and output a warning:\n     * If the key is invalid\n     * If the size of the item exceeds itemMaxSize.\n     * If the value is undefined\n     * If incorrect cache item configuration\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param value - the value of the item\n     * @param options - optional, the specified meta-data\n     *\n     * @throws if the item is too big which exceeds the limit of single item size\n     * @throws if the key is invalid\n     */\n    InMemoryCache.prototype.setItem = function (key, value, options) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // invalid keys\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return;\n        }\n        if ((typeof value) === 'undefined') {\n            logger.warn(\"The value of item should not be undefined!\");\n            return;\n        }\n        var cacheItemOptions = {\n            priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n            expires: options && options.expires !== undefined ?\n                options.expires : (this.config.defaultTTL + Utils_1.getCurrTime())\n        };\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n            return;\n        }\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n        // check wether this item is too big;\n        if (item.byteSize > this.config.itemMaxSize) {\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n            return;\n        }\n        // if key already in the cache, then delete it.\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n        // pop out items in the cache when cache is full based on LRU\n        // first start from lowest priority cache list\n        var cacheListIdx = this.maxPriority - 1;\n        while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n            if (!this.cacheList[cacheListIdx].isEmpty()) {\n                var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n                this._removeItem(popedItemKey, cacheListIdx);\n            }\n            else {\n                cacheListIdx -= 1;\n            }\n        }\n        this._setItem(prefixedKey, item, Number(item.priority) - 1);\n    };\n    /**\n     * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n     * If you specified callback function in the options,\n     * then the function will be executed if no such item in the cache\n     * and finally put the return value into cache.\n     * Please make sure the callback function will return the value you want to put into the cache.\n     * The cache will abort output a warning:\n     * If the key is invalid\n     *\n     * @param key - the key of the item\n     * @param options - the options of callback function\n     */\n    InMemoryCache.prototype.getItem = function (key, options) {\n        var ret = null;\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return null;\n        }\n        // check whether it's in the cachelist\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            if (this._isExpired(prefixedKey)) {\n                // if expired, remove that item and return null\n                this._removeItem(prefixedKey, presentKeyPrio - 1);\n            }\n            else {\n                // if not expired, great, return the value and refresh it\n                ret = Utils_1.CacheObject.getItem(prefixedKey);\n                var item = JSON.parse(ret);\n                this.cacheList[item.priority - 1].refresh(prefixedKey);\n                return item.data;\n            }\n        }\n        if (options && options.callback !== undefined) {\n            var val = options.callback();\n            if (val !== null) {\n                this.setItem(key, val, options);\n            }\n            return val;\n        }\n        return null;\n    };\n    /**\n     * remove item from the cache\n     *\n     * @param key - the key of the item\n     */\n    InMemoryCache.prototype.removeItem = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // check if the key is in the cache\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n    };\n    /**\n     * clear the entire cache\n     */\n    InMemoryCache.prototype.clear = function () {\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n                var key = _a[_i];\n                this._removeItem(key, i);\n            }\n        }\n    };\n    /**\n     * Return all the keys in the cache.\n     */\n    InMemoryCache.prototype.getAllKeys = function () {\n        var keys = [];\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n                var key = _a[_i];\n                keys.push(key.substring(this.config.keyPrefix.length));\n            }\n        }\n        return keys;\n    };\n    /**\n     * return the current size of the cache\n     *\n     * @return the current size of the cache\n     */\n    InMemoryCache.prototype.getCacheCurSize = function () {\n        return this.curSizeInBytes;\n    };\n    /**\n     * Return a new instance of cache with customized configuration.\n     * @param config - the customized configuration\n     */\n    InMemoryCache.prototype.createInstance = function (config) {\n        return new InMemoryCache(config);\n    };\n    return InMemoryCache;\n}(StorageCache_1.default));\nexports.InMemoryCache = InMemoryCache;\nvar instance = new InMemoryCache();\nexports.default = instance;\n"},"sourceMaps":{"js":{"version":3,"file":"InMemoryCache.js","sourceRoot":"","sources":["../src/InMemoryCache.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport {\r\n    CacheList,\r\n    defaultConfig,\r\n    getCurrTime,\r\n    CacheObject\r\n} from './Utils';\r\n\r\nimport StorageCache from './StorageCache';\r\nimport { ICache, CacheConfig, CacheItem, CacheItemOptions } from './types';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\n\r\nconst logger = new Logger('InMemoryCache');\r\n\r\n/**\r\n * Customized in-memory cache with LRU implemented\r\n * @member cacheObj - object which store items\r\n * @member cacheList - list of keys in the cache with LRU\r\n * @member curSizeInBytes - current size of the cache\r\n * @member maxPriority - max of the priority\r\n * @member cacheSizeLimit - the limit of cache size\r\n */\r\nexport class InMemoryCache extends StorageCache implements ICache {\r\n    private cacheList: CacheList[];\r\n    private curSizeInBytes: number;\r\n    private maxPriority: number;\r\n    private cacheSizeLimit: number;\r\n\r\n    /**\r\n     * initialize the cache\r\n     * \r\n     * @param config - the configuration of the cache\r\n     */\r\n    constructor(config?: CacheConfig) {\r\n        const cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\r\n        super(cacheConfig);\r\n        logger.debug('now we start!');\r\n        this.cacheList = [];\r\n        this.curSizeInBytes = 0;\r\n        this.maxPriority = 5;\r\n\r\n        this.getItem = this.getItem.bind(this);\r\n        this.setItem = this.setItem.bind(this);\r\n        this.removeItem = this.removeItem.bind(this);\r\n\r\n        // initialize list for every priority\r\n        for (let i = 0; i < this.maxPriority; i += 1) {\r\n            this.cacheList[i] = new CacheList();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * decrease current size of the cache\r\n     * \r\n     * @param amount - the amount of the cache size which needs to be decreased\r\n     */\r\n    private _decreaseCurSizeInBytes(amount: number): void {\r\n        this.curSizeInBytes -= amount;\r\n    }\r\n\r\n    /**\r\n     * increase current size of the cache\r\n     * \r\n     * @param amount - the amount of the cache szie which need to be increased\r\n     */\r\n    private _increaseCurSizeInBytes(amount: number): void {\r\n        this.curSizeInBytes += amount;\r\n    }\r\n\r\n    /**\r\n     * check whether item is expired\r\n     * \r\n     * @param key - the key of the item\r\n     * \r\n     * @return true if the item is expired.\r\n     */\r\n    private _isExpired(key: string): boolean {\r\n        const text: string | null = CacheObject.getItem(key);\r\n        const item: CacheItem = JSON.parse(text);\r\n        if (getCurrTime() >= item.expires) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * delete item from cache\r\n     * \r\n     * @param prefixedKey - the key of the item\r\n     * @param listIdx - indicates which cache list the key belongs to\r\n     */\r\n    private _removeItem(prefixedKey: string, listIdx: number): void {\r\n        // delete the key from the list\r\n        this.cacheList[listIdx].removeItem(prefixedKey);\r\n        // decrease the current size of the cache\r\n        this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\r\n        // finally remove the item from memory\r\n        CacheObject.removeItem(prefixedKey);\r\n    }\r\n\r\n    /**\r\n     * put item into cache\r\n     * \r\n     * @param prefixedKey - the key of the item\r\n     * @param itemData - the value of the item\r\n     * @param itemSizeInBytes - the byte size of the item\r\n     * @param listIdx - indicates which cache list the key belongs to\r\n     */\r\n    private _setItem(prefixedKey: string, item: CacheItem, listIdx: number): void {\r\n        // insert the key into the list\r\n        this.cacheList[listIdx].insertItem(prefixedKey);\r\n        // increase the current size of the cache\r\n        this._increaseCurSizeInBytes(item.byteSize);\r\n        // finally add the item into memory\r\n        CacheObject.setItem(prefixedKey, JSON.stringify(item));\r\n    }\r\n\r\n    /**\r\n     * see whether cache is full\r\n     * \r\n     * @param itemSize \r\n     * \r\n     * @return true if cache is full\r\n     */\r\n    private _isCacheFull(itemSize: number): boolean {\r\n        return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\r\n    }\r\n\r\n    /**\r\n     * check whether the cache contains the key\r\n     * \r\n     * @param key \r\n     */\r\n    private containsKey(key: string): number {\r\n        const prefixedKey: string = this.config.keyPrefix + key;\r\n        for (let i = 0; i < this.maxPriority; i += 1) {\r\n            if (this.cacheList[i].containsKey(prefixedKey)) {\r\n                return i + 1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * * Set item into cache. You can put number, string, boolean or object.\r\n     * The cache will first check whether has the same key.\r\n     * If it has, it will delete the old item and then put the new item in\r\n     * The cache will pop out items if it is full\r\n     * You can specify the cache item options. The cache will abort and output a warning:\r\n     * If the key is invalid\r\n     * If the size of the item exceeds itemMaxSize.\r\n     * If the value is undefined\r\n     * If incorrect cache item configuration\r\n     * If error happened with browser storage\r\n     * \r\n     * @param key - the key of the item\r\n     * @param value - the value of the item\r\n     * @param options - optional, the specified meta-data\r\n     * \r\n     * @throws if the item is too big which exceeds the limit of single item size\r\n     * @throws if the key is invalid\r\n     */\r\n    public setItem(\r\n        key: string, value: object | string | number | boolean,\r\n        options?: CacheItemOptions): void {\r\n        const prefixedKey: string = this.config.keyPrefix + key;\r\n        // invalid keys\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n            return;\r\n        }\r\n\r\n        if ((typeof value) === 'undefined') {\r\n            logger.warn(`The value of item should not be undefined!`);\r\n            return;\r\n        }\r\n\r\n        const cacheItemOptions: CacheItemOptions = {\r\n            priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\r\n            expires: options && options.expires !== undefined ?\r\n                options.expires : (this.config.defaultTTL + getCurrTime())\r\n        };\r\n\r\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n            logger.warn(`Invalid parameter: priority due to out or range. It should be within 1 and 5.`);\r\n            return;\r\n        }\r\n\r\n        const item: CacheItem = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\r\n\r\n        // check wether this item is too big;\r\n        if (item.byteSize > this.config.itemMaxSize) {\r\n            logger.warn(`Item with key: ${key} you are trying to put into is too big!`);\r\n            return;\r\n        }\r\n\r\n        // if key already in the cache, then delete it.\r\n        const presentKeyPrio: number = this.containsKey(key);\r\n        if (presentKeyPrio !== -1) {\r\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\r\n        }\r\n\r\n        // pop out items in the cache when cache is full based on LRU\r\n        // first start from lowest priority cache list\r\n        let cacheListIdx = this.maxPriority - 1;\r\n        while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\r\n            if (!this.cacheList[cacheListIdx].isEmpty()) {\r\n                const popedItemKey = this.cacheList[cacheListIdx].getLastItem();\r\n                this._removeItem(popedItemKey, cacheListIdx);\r\n            } else {\r\n                cacheListIdx -= 1;\r\n            }\r\n        }\r\n\r\n        this._setItem(prefixedKey, item, Number(item.priority) - 1);\r\n    }\r\n\r\n    /**\r\n     * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\r\n     * If you specified callback function in the options, \r\n     * then the function will be executed if no such item in the cache \r\n     * and finally put the return value into cache. \r\n     * Please make sure the callback function will return the value you want to put into the cache.\r\n     * The cache will abort output a warning:\r\n     * If the key is invalid\r\n     * \r\n     * @param key - the key of the item\r\n     * @param options - the options of callback function\r\n     */\r\n    public getItem(key: string, options?: CacheItemOptions): any {\r\n        let ret: string | null = null;\r\n        const prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n            return null;\r\n        }\r\n\r\n        // check whether it's in the cachelist\r\n        const presentKeyPrio: number = this.containsKey(key);\r\n        if (presentKeyPrio !== -1) {\r\n            if (this._isExpired(prefixedKey)) {\r\n                // if expired, remove that item and return null\r\n                this._removeItem(prefixedKey, presentKeyPrio - 1);\r\n            } else {\r\n                // if not expired, great, return the value and refresh it\r\n                ret = CacheObject.getItem(prefixedKey);\r\n                const item: CacheItem = JSON.parse(ret);\r\n                this.cacheList[item.priority - 1].refresh(prefixedKey);\r\n                return item.data;\r\n            }\r\n        }\r\n\r\n        if (options && options.callback !== undefined) {\r\n            const val: object | string | number | boolean = options.callback();\r\n            if (val !== null) {\r\n                this.setItem(key, val, options);\r\n            }\r\n            return val;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * remove item from the cache\r\n     * \r\n     * @param key - the key of the item\r\n     */\r\n    public removeItem(key: string): void {\r\n        const prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n        // check if the key is in the cache\r\n        const presentKeyPrio: number = this.containsKey(key);\r\n        if (presentKeyPrio !== -1) {\r\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clear the entire cache\r\n     */\r\n    public clear(): void {\r\n        for (let i = 0; i < this.maxPriority; i += 1) {\r\n            for (const key of this.cacheList[i].getKeys()) {\r\n                this._removeItem(key, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return all the keys in the cache.\r\n     */\r\n    public getAllKeys(): string[] {\r\n        const keys: string[] = [];\r\n        for (let i = 0; i < this.maxPriority; i += 1) {\r\n            for (const key of this.cacheList[i].getKeys()) {\r\n                keys.push(key.substring(this.config.keyPrefix.length));\r\n            }\r\n        }\r\n\r\n        return keys;\r\n    }\r\n\r\n    /**\r\n     * return the current size of the cache\r\n     * \r\n     * @return the current size of the cache\r\n     */\r\n    public getCacheCurSize(): number {\r\n        return this.curSizeInBytes;\r\n    }\r\n\r\n    /**\r\n     * Return a new instance of cache with customized configuration.\r\n     * @param config - the customized configuration\r\n     */\r\n    public createInstance(config: CacheConfig): ICache {\r\n        return new InMemoryCache(config);\r\n    }\r\n}\r\n\r\nconst instance: ICache = new InMemoryCache();\r\nexport default instance;\r\n"]}},"error":null,"hash":"b5b92ed8ed4db33be2749b6e18bc49de","cacheData":{"env":{}}}