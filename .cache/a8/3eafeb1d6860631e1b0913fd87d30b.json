{"id":"node_modules/@aws-amplify/analytics/lib/vendor/dom-utils/delegate.js","dependencies":[{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\vendor\\dom-utils\\delegate.js.map","includedInParent":true,"mtime":1557861886000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\src\\vendor\\dom-utils\\delegate.ts","includedInParent":true,"mtime":1557861738000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\package.json","includedInParent":true,"mtime":1560308010598},{"name":"./closest","loc":{"line":6,"column":24},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\vendor\\dom-utils\\delegate.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\vendor\\dom-utils\\closest.js"},{"name":"./matches","loc":{"line":7,"column":24},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\vendor\\dom-utils\\delegate.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\analytics\\lib\\vendor\\dom-utils\\matches.js"}],"generated":{"js":"\"use strict\";\n/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar closest_1 = require(\"./closest\");\nvar matches_1 = require(\"./matches\");\n/**\n * Delegates the handling of events for an element matching a selector to an\n * ancestor of the matching element.\n * @param {!Node} ancestor The ancestor element to add the listener to.\n * @param {string} eventType The event type to listen to.\n * @param {string} selector A CSS selector to match against child elements.\n * @param {!Function} callback A function to run any time the event happens.\n * @param {Object=} opts A configuration options object. The available options:\n *     - useCapture<boolean>: If true, bind to the event capture phase.\n *     - deep<boolean>: If true, delegate into shadow trees.\n * @return {Object} The delegate object. It contains a destroy method.\n */\nfunction delegate(ancestor, eventType, selector, callback, opts) {\n    if (opts === void 0) { opts = {}; }\n    // Defines the event listener.\n    var listener = function (event) {\n        var delegateTarget;\n        // If opts.composed is true and the event originated from inside a Shadow\n        // tree, check the composed path nodes.\n        if (opts['composed'] && typeof event['composedPath'] === 'function') {\n            var composedPath = event.composedPath();\n            for (var i = 0, node = void 0; node = composedPath[i]; i++) {\n                if (node.nodeType === 1 && matches_1.default(node, selector)) {\n                    delegateTarget = node;\n                }\n            }\n        }\n        else {\n            // Otherwise check the parents.\n            delegateTarget = closest_1.default(event.target, selector, true);\n        }\n        if (delegateTarget) {\n            callback.call(delegateTarget, event, delegateTarget);\n        }\n    };\n    ancestor.addEventListener(eventType, listener, opts['useCapture']);\n    return {\n        destroy: function () {\n            ancestor.removeEventListener(eventType, listener, opts['useCapture']);\n        },\n    };\n}\nexports.default = delegate;\n"},"sourceMaps":{"js":{"version":3,"file":"delegate.js","sourceRoot":"","sources":["../../../src/vendor/dom-utils/delegate.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAEH,qCAAgC;AAChC,qCAAgC;AAEhC;;;;;;;;;;;GAWG;AACH,kBACI,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAS;IAAT,qBAAA,EAAA,SAAS;IACpD,8BAA8B;IAC9B,IAAM,QAAQ,GAAG,UAAS,KAAK;QAC7B,IAAI,cAAc,CAAC;QAEnB,yEAAyE;QACzE,uCAAuC;QACvC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,OAAO,KAAK,CAAC,cAAc,CAAC,KAAK,UAAU,EAAE;YACnE,IAAM,YAAY,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;YAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,SAAA,EAAE,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACjD,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,IAAI,iBAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE;oBAClD,cAAc,GAAG,IAAI,CAAC;iBACvB;aACF;SACF;aAAM;YACL,+BAA+B;YAC/B,cAAc,GAAG,iBAAO,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;SACxD;QAED,IAAI,cAAc,EAAE;YAClB,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;SACtD;IACH,CAAC,CAAC;IAEF,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnE,OAAO;QACL,OAAO,EAAE;YACP,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACxE,CAAC;KACF,CAAC;AACJ,CAAC;AAhCD,2BAgCC","sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n\nimport closest from './closest';\nimport matches from './matches';\n\n/**\n * Delegates the handling of events for an element matching a selector to an\n * ancestor of the matching element.\n * @param {!Node} ancestor The ancestor element to add the listener to.\n * @param {string} eventType The event type to listen to.\n * @param {string} selector A CSS selector to match against child elements.\n * @param {!Function} callback A function to run any time the event happens.\n * @param {Object=} opts A configuration options object. The available options:\n *     - useCapture<boolean>: If true, bind to the event capture phase.\n *     - deep<boolean>: If true, delegate into shadow trees.\n * @return {Object} The delegate object. It contains a destroy method.\n */\nexport default function delegate(\n    ancestor, eventType, selector, callback, opts = {}) {\n  // Defines the event listener.\n  const listener = function(event) {\n    let delegateTarget;\n\n    // If opts.composed is true and the event originated from inside a Shadow\n    // tree, check the composed path nodes.\n    if (opts['composed'] && typeof event['composedPath'] === 'function') {\n      const composedPath = event.composedPath();\n      for (let i = 0, node; node = composedPath[i]; i++) {\n        if (node.nodeType === 1 && matches(node, selector)) {\n          delegateTarget = node;\n        }\n      }\n    } else {\n      // Otherwise check the parents.\n      delegateTarget = closest(event.target, selector, true);\n    }\n\n    if (delegateTarget) {\n      callback.call(delegateTarget, event, delegateTarget);\n    }\n  };\n\n  ancestor.addEventListener(eventType, listener, opts['useCapture']);\n\n  return {\n    destroy: () => {\n      ancestor.removeEventListener(eventType, listener, opts['useCapture']);\n    },\n  };\n}\n"]}},"error":null,"hash":"a36533ef175390c3102b0914ea6e768c","cacheData":{"env":{}}}