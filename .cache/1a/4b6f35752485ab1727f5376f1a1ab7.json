{"id":"node_modules/@aws-amplify/cache/lib/BrowserStorageCache.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\BrowserStorageCache.js.map","includedInParent":true,"mtime":1557861850000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\src\\BrowserStorageCache.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\package.json","includedInParent":true,"mtime":1560308010599},{"name":"./Utils","loc":{"line":25,"column":22},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\BrowserStorageCache.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\Utils\\index.js"},{"name":"./StorageCache","loc":{"line":26,"column":29},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\BrowserStorageCache.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\StorageCache.js"},{"name":"@aws-amplify/core","loc":{"line":27,"column":21},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\BrowserStorageCache.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"}],"generated":{"js":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Utils_1 = require(\"./Utils\");\nvar StorageCache_1 = require(\"./StorageCache\");\nvar core_1 = require(\"@aws-amplify/core\");\nvar logger = new core_1.ConsoleLogger('Cache');\n/**\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\n */\nvar BrowserStorageCache = /** @class */ (function (_super) {\n    __extends(BrowserStorageCache, _super);\n    /**\n     * initialize the cache\n     * @param config - the configuration of the cache\n     */\n    function BrowserStorageCache(config) {\n        var _this = this;\n        var cacheConfig = config ? Object.assign({}, Utils_1.defaultConfig, config) : Utils_1.defaultConfig;\n        _this = _super.call(this, cacheConfig) || this;\n        _this.config.storage = cacheConfig.storage;\n        _this.getItem = _this.getItem.bind(_this);\n        _this.setItem = _this.setItem.bind(_this);\n        _this.removeItem = _this.removeItem.bind(_this);\n        return _this;\n    }\n    /**\n     * decrease current size of the cache\n     *\n     * @private\n     * @param amount - the amount of the cache size which needs to be decreased\n     */\n    BrowserStorageCache.prototype._decreaseCurSizeInBytes = function (amount) {\n        var curSize = this.getCacheCurSize();\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\n    };\n    /**\n     * increase current size of the cache\n     *\n     * @private\n     * @param amount - the amount of the cache szie which need to be increased\n     */\n    BrowserStorageCache.prototype._increaseCurSizeInBytes = function (amount) {\n        var curSize = this.getCacheCurSize();\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\n    };\n    /**\n     * update the visited time if item has been visited\n     *\n     * @private\n     * @param item - the item which need to be refreshed\n     * @param prefixedKey - the key of the item\n     *\n     * @return the refreshed item\n     */\n    BrowserStorageCache.prototype._refreshItem = function (item, prefixedKey) {\n        item.visitedTime = Utils_1.getCurrTime();\n        this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n        return item;\n    };\n    /**\n     * check wether item is expired\n     *\n     * @private\n     * @param key - the key of the item\n     *\n     * @return true if the item is expired.\n     */\n    BrowserStorageCache.prototype._isExpired = function (key) {\n        var text = this.config.storage.getItem(key);\n        var item = JSON.parse(text);\n        if (Utils_1.getCurrTime() >= item.expires) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * delete item from cache\n     *\n     * @private\n     * @param prefixedKey - the key of the item\n     * @param size - optional, the byte size of the item\n     */\n    BrowserStorageCache.prototype._removeItem = function (prefixedKey, size) {\n        var itemSize = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\n        this._decreaseCurSizeInBytes(itemSize);\n        // remove the cache item\n        this.config.storage.removeItem(prefixedKey);\n    };\n    /**\n     * put item into cache\n     *\n     * @private\n     * @param prefixedKey - the key of the item\n     * @param itemData - the value of the item\n     * @param itemSizeInBytes - the byte size of the item\n     */\n    BrowserStorageCache.prototype._setItem = function (prefixedKey, item) {\n        // update the cache size\n        this._increaseCurSizeInBytes(item.byteSize);\n        try {\n            this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n        }\n        catch (setItemErr) {\n            // if failed, we need to rollback the cache size\n            this._decreaseCurSizeInBytes(item.byteSize);\n            logger.error(\"Failed to set item \" + setItemErr);\n        }\n    };\n    /**\n     * total space needed when poping out items\n     *\n     * @private\n     * @param itemSize\n     *\n     * @return total space needed\n     */\n    BrowserStorageCache.prototype._sizeToPop = function (itemSize) {\n        var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\n        var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\n        return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;\n    };\n    /**\n     * see whether cache is full\n     *\n     * @private\n     * @param itemSize\n     *\n     * @return true if cache is full\n     */\n    BrowserStorageCache.prototype._isCacheFull = function (itemSize) {\n        return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\n    };\n    /**\n     * scan the storage and find out all the keys owned by this cache\n     * also clean the expired keys while scanning\n     *\n     * @private\n     *\n     * @return array of keys\n     */\n    BrowserStorageCache.prototype._findValidKeys = function () {\n        var keys = [];\n        var keyInCache = [];\n        // get all keys in Storage\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            keyInCache.push(this.config.storage.key(i));\n        }\n        // find those items which belong to our cache and also clean those expired items\n        for (var i = 0; i < keyInCache.length; i += 1) {\n            var key = keyInCache[i];\n            if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n                if (this._isExpired(key)) {\n                    this._removeItem(key);\n                }\n                else {\n                    keys.push(key);\n                }\n            }\n        }\n        return keys;\n    };\n    /**\n     * get all the items we have, sort them by their priority,\n     * if priority is same, sort them by their last visited time\n     * pop out items from the low priority (5 is the lowest)\n     *\n     * @private\n     * @param keys - all the keys in this cache\n     * @param sizeToPop - the total size of the items which needed to be poped out\n     */\n    BrowserStorageCache.prototype._popOutItems = function (keys, sizeToPop) {\n        var items = [];\n        var remainedSize = sizeToPop;\n        // get the items from Storage\n        for (var i = 0; i < keys.length; i += 1) {\n            var val = this.config.storage.getItem(keys[i]);\n            if (val != null) {\n                var item = JSON.parse(val);\n                items.push(item);\n            }\n        }\n        // first compare priority\n        // then compare visited time\n        items.sort(function (a, b) {\n            if (a.priority > b.priority) {\n                return -1;\n            }\n            else if (a.priority < b.priority) {\n                return 1;\n            }\n            else {\n                if (a.visitedTime < b.visitedTime) {\n                    return -1;\n                }\n                else\n                    return 1;\n            }\n        });\n        for (var i = 0; i < items.length; i += 1) {\n            // pop out items until we have enough room for new item\n            this._removeItem(items[i].key, items[i].byteSize);\n            remainedSize -= items[i].byteSize;\n            if (remainedSize <= 0) {\n                return;\n            }\n        }\n    };\n    /**\n     * Set item into cache. You can put number, string, boolean or object.\n     * The cache will first check whether has the same key.\n     * If it has, it will delete the old item and then put the new item in\n     * The cache will pop out items if it is full\n     * You can specify the cache item options. The cache will abort and output a warning:\n     * If the key is invalid\n     * If the size of the item exceeds itemMaxSize.\n     * If the value is undefined\n     * If incorrect cache item configuration\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param value - the value of the item\n     * @param {Object} [options] - optional, the specified meta-data\n     */\n    BrowserStorageCache.prototype.setItem = function (key, value, options) {\n        logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\n        var prefixedKey = this.config.keyPrefix + key;\n        // invalid keys\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return;\n        }\n        if (typeof value === 'undefined') {\n            logger.warn(\"The value of item should not be undefined!\");\n            return;\n        }\n        var cacheItemOptions = {\n            priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n            expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + Utils_1.getCurrTime()\n        };\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n            return;\n        }\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n        // check wether this item is too big;\n        if (item.byteSize > this.config.itemMaxSize) {\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n            return;\n        }\n        try {\n            // first look into the storage, if it exists, delete it.\n            var val = this.config.storage.getItem(prefixedKey);\n            if (val) {\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n            }\n            // check whether the cache is full\n            if (this._isCacheFull(item.byteSize)) {\n                var validKeys = this._findValidKeys();\n                // check again and then pop out items\n                if (this._isCacheFull(item.byteSize)) {\n                    var sizeToPop = this._sizeToPop(item.byteSize);\n                    this._popOutItems(validKeys, sizeToPop);\n                }\n            }\n            // put item in the cache\n            // may failed due to storage full\n            this._setItem(prefixedKey, item);\n        }\n        catch (e) {\n            logger.warn(\"setItem failed! \" + e);\n        }\n    };\n    /**\n     * Get item from cache. It will return null if item doesn’t exist or it has been expired.\n     * If you specified callback function in the options,\n     * then the function will be executed if no such item in the cache\n     * and finally put the return value into cache.\n     * Please make sure the callback function will return the value you want to put into the cache.\n     * The cache will abort output a warning:\n     * If the key is invalid\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param {Object} [options] - the options of callback function\n     *\n     * @return - return the value of the item\n     */\n    BrowserStorageCache.prototype.getItem = function (key, options) {\n        logger.log(\"Get item: key is \" + key + \" with options \" + options);\n        var ret = null;\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return null;\n        }\n        try {\n            ret = this.config.storage.getItem(prefixedKey);\n            if (ret != null) {\n                if (this._isExpired(prefixedKey)) {\n                    // if expired, remove that item and return null\n                    this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\n                    ret = null;\n                }\n                else {\n                    // if not expired, great, return the value and refresh it\n                    var item = JSON.parse(ret);\n                    item = this._refreshItem(item, prefixedKey);\n                    return item.data;\n                }\n            }\n            if (options && options.callback !== undefined) {\n                var val = options.callback();\n                if (val !== null) {\n                    this.setItem(key, val, options);\n                }\n                return val;\n            }\n            return null;\n        }\n        catch (e) {\n            logger.warn(\"getItem failed! \" + e);\n            return null;\n        }\n    };\n    /**\n     * remove item from the cache\n     * The cache will abort output a warning:\n     * If error happened with browser storage\n     * @param key - the key of the item\n     */\n    BrowserStorageCache.prototype.removeItem = function (key) {\n        logger.log(\"Remove item: key is \" + key);\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n            return;\n        }\n        try {\n            var val = this.config.storage.getItem(prefixedKey);\n            if (val) {\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n            }\n        }\n        catch (e) {\n            logger.warn(\"removeItem failed! \" + e);\n        }\n    };\n    /**\n     * clear the entire cache\n     * The cache will abort output a warning:\n     * If error happened with browser storage\n     */\n    BrowserStorageCache.prototype.clear = function () {\n        logger.log(\"Clear Cache\");\n        var keysToRemove = [];\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            var key = this.config.storage.key(i);\n            if (key.indexOf(this.config.keyPrefix) === 0) {\n                keysToRemove.push(key);\n            }\n        }\n        try {\n            for (var i = 0; i < keysToRemove.length; i += 1) {\n                this.config.storage.removeItem(keysToRemove[i]);\n            }\n        }\n        catch (e) {\n            logger.warn(\"clear failed! \" + e);\n        }\n    };\n    /**\n     * Return all the keys in the cache.\n     *\n     * @return - all keys in the cache\n     */\n    BrowserStorageCache.prototype.getAllKeys = function () {\n        var keys = [];\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            var key = this.config.storage.key(i);\n            if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n                keys.push(key.substring(this.config.keyPrefix.length));\n            }\n        }\n        return keys;\n    };\n    /**\n     * return the current size of the cache\n     *\n     * @return - current size of the cache\n     */\n    BrowserStorageCache.prototype.getCacheCurSize = function () {\n        var ret = this.config.storage.getItem(this.cacheCurSizeKey);\n        if (!ret) {\n            this.config.storage.setItem(this.cacheCurSizeKey, '0');\n            ret = '0';\n        }\n        return Number(ret);\n    };\n    /**\n     * Return a new instance of cache with customized configuration.\n     * @param config - the customized configuration\n     *\n     * @return - new instance of Cache\n     */\n    BrowserStorageCache.prototype.createInstance = function (config) {\n        if (!config.keyPrefix || config.keyPrefix === Utils_1.defaultConfig.keyPrefix) {\n            logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\n            config.keyPrefix = Utils_1.getCurrTime.toString();\n        }\n        return new BrowserStorageCache(config);\n    };\n    return BrowserStorageCache;\n}(StorageCache_1.default));\nexports.BrowserStorageCache = BrowserStorageCache;\nvar instance = new BrowserStorageCache();\nexports.default = instance;\n"},"sourceMaps":{"js":{"version":3,"file":"BrowserStorageCache.js","sourceRoot":"","sources":["../src/BrowserStorageCache.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport {\r\n    defaultConfig,\r\n    getCurrTime\r\n} from './Utils';\r\n\r\nimport StorageCache from './StorageCache';\r\nimport { ICache, CacheConfig, CacheItem, CacheItemOptions } from './types';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\n\r\nconst logger = new Logger('Cache');\r\n\r\n/**\r\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\r\n */\r\nexport class BrowserStorageCache extends StorageCache implements ICache {\r\n    /**\r\n     * initialize the cache\r\n     * @param config - the configuration of the cache\r\n     */\r\n    constructor(config?: CacheConfig) {\r\n        const cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\r\n        super(cacheConfig);\r\n        this.config.storage = cacheConfig.storage;\r\n        this.getItem = this.getItem.bind(this);\r\n        this.setItem = this.setItem.bind(this);\r\n        this.removeItem = this.removeItem.bind(this);\r\n    }\r\n\r\n    /**\r\n     * decrease current size of the cache\r\n     * \r\n     * @private\r\n     * @param amount - the amount of the cache size which needs to be decreased\r\n     */\r\n    private _decreaseCurSizeInBytes(amount: number): void {\r\n        const curSize: number = this.getCacheCurSize();\r\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\r\n    }\r\n\r\n    /**\r\n     * increase current size of the cache\r\n     * \r\n     * @private\r\n     * @param amount - the amount of the cache szie which need to be increased\r\n     */\r\n    private _increaseCurSizeInBytes(amount: number): void {\r\n        const curSize: number = this.getCacheCurSize();\r\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\r\n    }\r\n\r\n    /**\r\n     * update the visited time if item has been visited\r\n     * \r\n     * @private\r\n     * @param item - the item which need to be refreshed\r\n     * @param prefixedKey - the key of the item\r\n     * \r\n     * @return the refreshed item\r\n     */\r\n    private _refreshItem(item: CacheItem, prefixedKey: string): CacheItem {\r\n        item.visitedTime = getCurrTime();\r\n        this.config.storage.setItem(prefixedKey, JSON.stringify(item));\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * check wether item is expired\r\n     * \r\n     * @private\r\n     * @param key - the key of the item\r\n     * \r\n     * @return true if the item is expired.\r\n     */\r\n    private _isExpired(key: string): boolean {\r\n        const text: string | null = this.config.storage.getItem(key);\r\n        const item: CacheItem = JSON.parse(text);\r\n        if (getCurrTime() >= item.expires) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * delete item from cache\r\n     * \r\n     * @private\r\n     * @param prefixedKey - the key of the item\r\n     * @param size - optional, the byte size of the item\r\n     */\r\n    private _removeItem(prefixedKey: string, size?: number): void {\r\n        const itemSize: number = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\r\n        this._decreaseCurSizeInBytes(itemSize);\r\n        // remove the cache item\r\n        this.config.storage.removeItem(prefixedKey);\r\n    }\r\n\r\n    /**\r\n     * put item into cache\r\n     * \r\n     * @private\r\n     * @param prefixedKey - the key of the item\r\n     * @param itemData - the value of the item\r\n     * @param itemSizeInBytes - the byte size of the item\r\n     */\r\n    private _setItem(prefixedKey: string, item: CacheItem): void {\r\n        // update the cache size\r\n        this._increaseCurSizeInBytes(item.byteSize);\r\n\r\n        try {\r\n            this.config.storage.setItem(prefixedKey, JSON.stringify(item));\r\n        } catch (setItemErr) {\r\n            // if failed, we need to rollback the cache size\r\n            this._decreaseCurSizeInBytes(item.byteSize);\r\n            logger.error(`Failed to set item ${setItemErr}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * total space needed when poping out items\r\n     * \r\n     * @private\r\n     * @param itemSize \r\n     * \r\n     * @return total space needed\r\n     */\r\n    private _sizeToPop(itemSize: number): number {\r\n        const spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\r\n        const cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\r\n        return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;\r\n    }\r\n\r\n    /**\r\n     * see whether cache is full\r\n     * \r\n     * @private\r\n     * @param itemSize \r\n     * \r\n     * @return true if cache is full\r\n     */\r\n    private _isCacheFull(itemSize: number): boolean {\r\n        return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\r\n    }\r\n\r\n    /**\r\n     * scan the storage and find out all the keys owned by this cache\r\n     * also clean the expired keys while scanning\r\n     * \r\n     * @private\r\n     * \r\n     * @return array of keys\r\n     */\r\n    private _findValidKeys(): string[] {\r\n        const keys: string[] = [];\r\n        const keyInCache: string[] = [];\r\n        // get all keys in Storage\r\n        for (let i = 0; i < this.config.storage.length; i += 1) {\r\n            keyInCache.push(this.config.storage.key(i));\r\n        }\r\n\r\n        // find those items which belong to our cache and also clean those expired items\r\n        for (let i = 0; i < keyInCache.length; i += 1) {\r\n            const key: string = keyInCache[i];\r\n            if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\r\n                if (this._isExpired(key)) {\r\n                    this._removeItem(key);\r\n                } else {\r\n                    keys.push(key);\r\n                }\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n\r\n    /**\r\n     * get all the items we have, sort them by their priority,\r\n     * if priority is same, sort them by their last visited time\r\n     * pop out items from the low priority (5 is the lowest)\r\n     * \r\n     * @private\r\n     * @param keys - all the keys in this cache\r\n     * @param sizeToPop - the total size of the items which needed to be poped out\r\n     */\r\n    private _popOutItems(keys: string[], sizeToPop: number): void {\r\n        const items: CacheItem[] = [];\r\n        let remainedSize: number = sizeToPop;\r\n        // get the items from Storage\r\n        for (let i = 0; i < keys.length; i += 1) {\r\n            const val: string | null = this.config.storage.getItem(keys[i]);\r\n            if (val != null) {\r\n                const item: CacheItem = JSON.parse(val);\r\n                items.push(item);\r\n            }\r\n        }\r\n\r\n        // first compare priority\r\n        // then compare visited time\r\n        items.sort((a, b) => {\r\n            if (a.priority > b.priority) {\r\n                return -1;\r\n            } else if (a.priority < b.priority) {\r\n                return 1;\r\n            } else {\r\n                if (a.visitedTime < b.visitedTime) {\r\n                    return -1;\r\n                } else return 1;\r\n            }\r\n        });\r\n\r\n        for (let i = 0; i < items.length; i += 1) {\r\n            // pop out items until we have enough room for new item\r\n            this._removeItem(items[i].key, items[i].byteSize);\r\n            remainedSize -= items[i].byteSize;\r\n            if (remainedSize <= 0) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set item into cache. You can put number, string, boolean or object.\r\n     * The cache will first check whether has the same key.\r\n     * If it has, it will delete the old item and then put the new item in\r\n     * The cache will pop out items if it is full\r\n     * You can specify the cache item options. The cache will abort and output a warning:\r\n     * If the key is invalid\r\n     * If the size of the item exceeds itemMaxSize.\r\n     * If the value is undefined\r\n     * If incorrect cache item configuration\r\n     * If error happened with browser storage\r\n     * \r\n     * @param key - the key of the item\r\n     * @param value - the value of the item\r\n     * @param {Object} [options] - optional, the specified meta-data\r\n     */\r\n    public setItem(\r\n        key: string,\r\n        value: object | number | string | boolean,\r\n        options?: CacheItemOptions\r\n    ): void {\r\n        logger.log(`Set item: key is ${key}, value is ${value} with options: ${options}`);\r\n        const prefixedKey: string = this.config.keyPrefix + key;\r\n        // invalid keys\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n            return;\r\n        }\r\n\r\n        if (typeof value === 'undefined') {\r\n            logger.warn(`The value of item should not be undefined!`);\r\n            return;\r\n        }\r\n\r\n        const cacheItemOptions: CacheItemOptions = {\r\n            priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\r\n            expires:\r\n                options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\r\n        };\r\n\r\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n            logger.warn(`Invalid parameter: priority due to out or range. It should be within 1 and 5.`);\r\n            return;\r\n        }\r\n\r\n        const item: CacheItem = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\r\n\r\n        // check wether this item is too big;\r\n        if (item.byteSize > this.config.itemMaxSize) {\r\n            logger.warn(`Item with key: ${key} you are trying to put into is too big!`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // first look into the storage, if it exists, delete it.\r\n            const val: string | null = this.config.storage.getItem(prefixedKey);\r\n            if (val) {\r\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\r\n            }\r\n\r\n            // check whether the cache is full\r\n            if (this._isCacheFull(item.byteSize)) {\r\n                const validKeys: string[] = this._findValidKeys();\r\n                // check again and then pop out items\r\n                if (this._isCacheFull(item.byteSize)) {\r\n                    const sizeToPop: number = this._sizeToPop(item.byteSize);\r\n                    this._popOutItems(validKeys, sizeToPop);\r\n                }\r\n            }\r\n\r\n            // put item in the cache\r\n            // may failed due to storage full\r\n            this._setItem(prefixedKey, item);\r\n        } catch (e) {\r\n            logger.warn(`setItem failed! ${e}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get item from cache. It will return null if item doesn’t exist or it has been expired.\r\n     * If you specified callback function in the options, \r\n     * then the function will be executed if no such item in the cache \r\n     * and finally put the return value into cache. \r\n     * Please make sure the callback function will return the value you want to put into the cache.\r\n     * The cache will abort output a warning:\r\n     * If the key is invalid\r\n     * If error happened with browser storage\r\n     * \r\n     * @param key - the key of the item\r\n     * @param {Object} [options] - the options of callback function\r\n     * \r\n     * @return - return the value of the item\r\n     */\r\n    public getItem(key: string, options?: CacheItemOptions): any {\r\n        logger.log(`Get item: key is ${key} with options ${options}`);\r\n        let ret: string | null = null;\r\n        const prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            ret = this.config.storage.getItem(prefixedKey);\r\n            if (ret != null) {\r\n                if (this._isExpired(prefixedKey)) {\r\n                    // if expired, remove that item and return null\r\n                    this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\r\n                    ret = null;\r\n                } else {\r\n                    // if not expired, great, return the value and refresh it\r\n                    let item: CacheItem = JSON.parse(ret);\r\n                    item = this._refreshItem(item, prefixedKey);\r\n                    return item.data;\r\n                }\r\n            }\r\n\r\n            if (options && options.callback !== undefined) {\r\n                const val: object | string | number | boolean = options.callback();\r\n                if (val !== null) {\r\n                    this.setItem(key, val, options);\r\n                }\r\n                return val;\r\n            }\r\n            return null;\r\n        } catch (e) {\r\n            logger.warn(`getItem failed! ${e}`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove item from the cache\r\n     * The cache will abort output a warning:\r\n     * If error happened with browser storage\r\n     * @param key - the key of the item\r\n     */\r\n    public removeItem(key: string): void {\r\n        logger.log(`Remove item: key is ${key}`);\r\n        const prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const val: string | null = this.config.storage.getItem(prefixedKey);\r\n            if (val) {\r\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\r\n            }\r\n        } catch (e) {\r\n            logger.warn(`removeItem failed! ${e}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clear the entire cache\r\n     * The cache will abort output a warning:\r\n     * If error happened with browser storage\r\n     */\r\n    public clear(): void {\r\n        logger.log(`Clear Cache`);\r\n        const keysToRemove: string[] = [];\r\n\r\n        for (let i = 0; i < this.config.storage.length; i += 1) {\r\n            const key = this.config.storage.key(i);\r\n            if (key.indexOf(this.config.keyPrefix) === 0) {\r\n                keysToRemove.push(key);\r\n            }\r\n        }\r\n\r\n        try {\r\n            for (let i = 0; i < keysToRemove.length; i += 1) {\r\n                this.config.storage.removeItem(keysToRemove[i]);\r\n            }\r\n        } catch (e) {\r\n            logger.warn(`clear failed! ${e}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return all the keys in the cache.\r\n     * \r\n     * @return - all keys in the cache\r\n     */\r\n    public getAllKeys(): string[] {\r\n        const keys: string[] = [];\r\n        for (let i = 0; i < this.config.storage.length; i += 1) {\r\n            const key = this.config.storage.key(i);\r\n            if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\r\n                keys.push(key.substring(this.config.keyPrefix.length));\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n\r\n    /**\r\n     * return the current size of the cache\r\n     * \r\n     * @return - current size of the cache\r\n     */\r\n    public getCacheCurSize(): number {\r\n        let ret: string | null = this.config.storage.getItem(this.cacheCurSizeKey);\r\n        if (!ret) {\r\n            this.config.storage.setItem(this.cacheCurSizeKey, '0');\r\n            ret = '0';\r\n        }\r\n        return Number(ret);\r\n    }\r\n\r\n    /**\r\n     * Return a new instance of cache with customized configuration.\r\n     * @param config - the customized configuration\r\n     * \r\n     * @return - new instance of Cache\r\n     */\r\n    public createInstance(config: CacheConfig): ICache {\r\n        if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\r\n            logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\r\n            config.keyPrefix = getCurrTime.toString();\r\n        }\r\n\r\n        return new BrowserStorageCache(config);\r\n    }\r\n}\r\n\r\nconst instance: ICache = new BrowserStorageCache();\r\nexport default instance;\r\n"]}},"error":null,"hash":"00f9ebdf06d2ccb72cfebe3b0328924b","cacheData":{"env":{}}}