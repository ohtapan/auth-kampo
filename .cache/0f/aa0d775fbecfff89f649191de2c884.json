{"id":"node_modules/@aws-amplify/core/lib/Credentials.js","dependencies":[{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Credentials.js.map","includedInParent":true,"mtime":1557861835000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\src\\Credentials.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\package.json","includedInParent":true,"mtime":1560308010599},{"name":"./Logger","loc":{"line":46,"column":23},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Credentials.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Logger\\index.js"},{"name":"./StorageHelper","loc":{"line":47,"column":30},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Credentials.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\StorageHelper\\index.js"},{"name":"./Facet","loc":{"line":48,"column":22},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Credentials.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Facet.js"},{"name":"./JS","loc":{"line":49,"column":19},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Credentials.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\JS.js"},{"name":"./OAuthHelper","loc":{"line":50,"column":28},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Credentials.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\OAuthHelper\\index.js"},{"name":"./Amplify","loc":{"line":51,"column":24},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Credentials.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Amplify.js"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Logger_1 = require(\"./Logger\");\nvar StorageHelper_1 = require(\"./StorageHelper\");\nvar Facet_1 = require(\"./Facet\");\nvar JS_1 = require(\"./JS\");\nvar OAuthHelper_1 = require(\"./OAuthHelper\");\nvar Amplify_1 = require(\"./Amplify\");\nvar logger = new Logger_1.ConsoleLogger('Credentials');\nvar Credentials = /** @class */ (function () {\n    function Credentials(config) {\n        this._gettingCredPromise = null;\n        this._refreshHandlers = {};\n        this.configure(config);\n        this._refreshHandlers['google'] = OAuthHelper_1.GoogleOAuth.refreshGoogleToken;\n        this._refreshHandlers['facebook'] = OAuthHelper_1.FacebookOAuth.refreshFacebookToken;\n    }\n    Credentials.prototype.getCredSource = function () {\n        return this._credentials_source;\n    };\n    Credentials.prototype.configure = function (config) {\n        if (!config)\n            return this._config || {};\n        this._config = Object.assign({}, this._config, config);\n        var refreshHandlers = this._config.refreshHandlers;\n        // If the developer has provided an object of refresh handlers,\n        // then we can merge the provided handlers with the current handlers.\n        if (refreshHandlers) {\n            this._refreshHandlers = __assign({}, this._refreshHandlers, refreshHandlers);\n        }\n        this._storage = this._config.storage;\n        if (!this._storage) {\n            this._storage = new StorageHelper_1.default().getStorage();\n        }\n        this._storageSync = Promise.resolve();\n        if (typeof this._storage['sync'] === 'function') {\n            this._storageSync = this._storage['sync']();\n        }\n        return this._config;\n    };\n    Credentials.prototype.get = function () {\n        logger.debug('getting credentials');\n        return this._pickupCredentials();\n    };\n    Credentials.prototype._pickupCredentials = function () {\n        logger.debug('picking up credentials');\n        if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n            logger.debug('getting new cred promise');\n            if (Facet_1.AWS.config && Facet_1.AWS.config.credentials && Facet_1.AWS.config.credentials instanceof Facet_1.AWS.Credentials) {\n                this._gettingCredPromise = JS_1.default.makeQuerablePromise(this._setCredentialsFromAWS());\n            }\n            else {\n                this._gettingCredPromise = JS_1.default.makeQuerablePromise(this._keepAlive());\n            }\n        }\n        else {\n            logger.debug('getting old cred promise');\n        }\n        return this._gettingCredPromise;\n    };\n    Credentials.prototype._keepAlive = function () {\n        logger.debug('checking if credentials exists and not expired');\n        var cred = this._credentials;\n        if (cred && !this._isExpired(cred)) {\n            logger.debug('credentials not changed and not expired, directly return');\n            return Promise.resolve(cred);\n        }\n        logger.debug('need to get a new credential or refresh the existing one');\n        if (Amplify_1.default.Auth && typeof Amplify_1.default.Auth.currentUserCredentials === 'function') {\n            return Amplify_1.default.Auth.currentUserCredentials();\n        }\n        else {\n            return Promise.reject('No Auth module registered in Amplify');\n        }\n    };\n    Credentials.prototype.refreshFederatedToken = function (federatedInfo) {\n        var _this = this;\n        logger.debug('Getting federated credentials');\n        var provider = federatedInfo.provider, user = federatedInfo.user;\n        var token = federatedInfo.token;\n        var expires_at = federatedInfo.expires_at;\n        var identity_id = federatedInfo.identity_id;\n        var that = this;\n        logger.debug('checking if federated jwt token expired');\n        if (expires_at > new Date().getTime()) {\n            // if not expired\n            logger.debug('token not expired');\n            return this._setCredentialsFromFederation({ provider: provider, token: token, user: user, identity_id: identity_id, expires_at: expires_at });\n        }\n        else {\n            // if refresh handler exists\n            if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n                logger.debug('getting refreshed jwt token from federation provider');\n                return that._refreshHandlers[provider]().then(function (data) {\n                    logger.debug('refresh federated token sucessfully', data);\n                    token = data.token;\n                    identity_id = data.identity_id;\n                    expires_at = data.expires_at;\n                    return that._setCredentialsFromFederation({ provider: provider, token: token, user: user, identity_id: identity_id, expires_at: expires_at });\n                }).catch(function (e) {\n                    logger.debug('refresh federated token failed', e);\n                    _this.clear();\n                    return Promise.reject('refreshing federation token failed: ' + e);\n                });\n            }\n            else {\n                logger.debug('no refresh handler for provider:', provider);\n                this.clear();\n                return Promise.reject('no refresh handler for provider');\n            }\n        }\n    };\n    Credentials.prototype._isExpired = function (credentials) {\n        if (!credentials) {\n            logger.debug('no credentials for expiration check');\n            return true;\n        }\n        logger.debug('is this credentials expired?', credentials);\n        var ts = new Date().getTime();\n        var delta = 10 * 60 * 1000; // 10 minutes\n        var expired = credentials.expired, expireTime = credentials.expireTime;\n        if (!expired && expireTime > ts + delta) {\n            return false;\n        }\n        return true;\n    };\n    Credentials.prototype._setCredentialsForGuest = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var attempted, _a, identityPoolId, region, mandatorySignIn, identityId, e_1, credentials, that;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        attempted = false;\n                        logger.debug('setting credentials for guest');\n                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n                        if (mandatorySignIn) {\n                            return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n                        }\n                        if (!identityPoolId) {\n                            logger.debug('No Cognito Federated Identity pool provided');\n                            return [2 /*return*/, Promise.reject('No Cognito Federated Identity pool provided')];\n                        }\n                        identityId = undefined;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _b.sent();\n                        identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _b.sent();\n                        logger.debug('Failed to get the cached identityId', e_1);\n                        return [3 /*break*/, 4];\n                    case 4:\n                        credentials = new Facet_1.AWS.CognitoIdentityCredentials({\n                            IdentityPoolId: identityPoolId,\n                            IdentityId: identityId ? identityId : undefined\n                        }, {\n                            region: region\n                        });\n                        that = this;\n                        return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)\n                                .then(function (res) {\n                                return res;\n                            })\n                                .catch(function (e) { return __awaiter(_this, void 0, void 0, function () {\n                                var newCredentials;\n                                return __generator(this, function (_a) {\n                                    // If identity id is deleted in the console, we make one attempt to recreate it\n                                    // and remove existing id from cache. \n                                    if (e.code === 'ResourceNotFoundException' &&\n                                        e.message === \"Identity '\" + identityId + \"' not found.\"\n                                        && !attempted) {\n                                        attempted = true;\n                                        logger.debug('Failed to load guest credentials');\n                                        this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n                                        credentials.clearCachedId();\n                                        newCredentials = new Facet_1.AWS.CognitoIdentityCredentials({\n                                            IdentityPoolId: identityPoolId,\n                                            IdentityId: undefined\n                                        }, {\n                                            region: region\n                                        });\n                                        return [2 /*return*/, this._loadCredentials(newCredentials, 'guest', false, null)];\n                                    }\n                                    else {\n                                        return [2 /*return*/, e];\n                                    }\n                                    return [2 /*return*/];\n                                });\n                            }); })];\n                }\n            });\n        });\n    };\n    Credentials.prototype._setCredentialsFromAWS = function () {\n        var credentials = Facet_1.AWS.config.credentials;\n        logger.debug('setting credentials from aws');\n        var that = this;\n        if (credentials instanceof Facet_1.AWS.Credentials) {\n            return Promise.resolve(credentials);\n        }\n        else {\n            logger.debug('AWS.config.credentials is not an instance of AWS Credentials');\n            return Promise.reject('AWS.config.credentials is not an instance of AWS Credentials');\n        }\n    };\n    Credentials.prototype._setCredentialsFromFederation = function (params) {\n        var provider = params.provider, token = params.token, identity_id = params.identity_id, user = params.user, expires_at = params.expires_at;\n        var domains = {\n            'google': 'accounts.google.com',\n            'facebook': 'graph.facebook.com',\n            'amazon': 'www.amazon.com',\n            'developer': 'cognito-identity.amazonaws.com'\n        };\n        // Use custom provider url instead of the predefined ones\n        var domain = domains[provider] || provider;\n        if (!domain) {\n            return Promise.reject('You must specify a federated provider');\n        }\n        var logins = {};\n        logins[domain] = token;\n        var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        var credentials = new Facet_1.AWS.CognitoIdentityCredentials({\n            IdentityPoolId: identityPoolId,\n            IdentityId: identity_id,\n            Logins: logins\n        }, {\n            region: region\n        });\n        return this._loadCredentials(credentials, 'federated', true, params);\n    };\n    Credentials.prototype._setCredentialsFromSession = function (session) {\n        logger.debug('set credentials from session');\n        var idToken = session.getIdToken().getJwtToken();\n        var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n        var logins = {};\n        logins[key] = idToken;\n        var credentials = new Facet_1.AWS.CognitoIdentityCredentials({\n            IdentityPoolId: identityPoolId,\n            Logins: logins\n        }, {\n            region: region\n        });\n        var that = this;\n        return this._loadCredentials(credentials, 'userPool', true, null);\n    };\n    Credentials.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n        var _this = this;\n        var that = this;\n        var identityPoolId = this._config.identityPoolId;\n        return new Promise(function (res, rej) {\n            credentials.get(function (err) { return __awaiter(_this, void 0, void 0, function () {\n                var user, provider, token, expires_at, identity_id, e_2;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (err) {\n                                logger.debug('Failed to load credentials', credentials);\n                                rej(err);\n                                return [2 /*return*/];\n                            }\n                            logger.debug('Load credentials successfully', credentials);\n                            that._credentials = credentials;\n                            that._credentials.authenticated = authenticated;\n                            that._credentials_source = source;\n                            if (source === 'federated') {\n                                user = Object.assign({ id: this._credentials.identityId }, info.user);\n                                provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                                try {\n                                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                                        provider: provider,\n                                        token: token,\n                                        user: user,\n                                        expires_at: expires_at,\n                                        identity_id: identity_id\n                                    }));\n                                }\n                                catch (e) {\n                                    logger.debug('Failed to put federated info into auth storage', e);\n                                }\n                                // the Cache module no longer stores federated info\n                                // this is just for backward compatibility\n                                if (Amplify_1.default.Cache && typeof Amplify_1.default.Cache.setItem === 'function') {\n                                    Amplify_1.default.Cache.setItem('federatedInfo', {\n                                        provider: provider,\n                                        token: token,\n                                        user: user,\n                                        expires_at: expires_at,\n                                        identity_id: identity_id\n                                    }, { priority: 1 });\n                                }\n                                else {\n                                    logger.debug('No Cache module registered in Amplify');\n                                }\n                            }\n                            if (!(source === 'guest')) return [3 /*break*/, 4];\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, this._storageSync];\n                        case 2:\n                            _a.sent();\n                            this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId);\n                            return [3 /*break*/, 4];\n                        case 3:\n                            e_2 = _a.sent();\n                            logger.debug('Failed to cache identityId', e_2);\n                            return [3 /*break*/, 4];\n                        case 4:\n                            res(that._credentials);\n                            return [2 /*return*/];\n                    }\n                });\n            }); });\n        });\n    };\n    Credentials.prototype.set = function (params, source) {\n        if (source === 'session') {\n            return this._setCredentialsFromSession(params);\n        }\n        else if (source === 'federation') {\n            return this._setCredentialsFromFederation(params);\n        }\n        else if (source === 'guest') {\n            return this._setCredentialsForGuest();\n        }\n        else {\n            logger.debug('no source specified for setting credentials');\n            return Promise.reject('invalid source');\n        }\n    };\n    Credentials.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, identityPoolId, region, credentials;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n                        if (identityPoolId) {\n                            credentials = new Facet_1.AWS.CognitoIdentityCredentials({\n                                IdentityPoolId: identityPoolId\n                            }, {\n                                region: region\n                            });\n                            credentials.clearCachedId();\n                        }\n                        this._credentials = null;\n                        this._credentials_source = null;\n                        this._storage.removeItem('aws-amplify-federatedInfo');\n                        if (!(Amplify_1.default.Cache && typeof Amplify_1.default.Cache.setItem === 'function')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Amplify_1.default.Cache.removeItem('federatedInfo')];\n                    case 1:\n                        _b.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        logger.debug('No Cache module registered in Amplify');\n                        _b.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Compact version of credentials\n     * @param {Object} credentials\n     * @return {Object} - Credentials\n     */\n    Credentials.prototype.shear = function (credentials) {\n        return {\n            accessKeyId: credentials.accessKeyId,\n            sessionToken: credentials.sessionToken,\n            secretAccessKey: credentials.secretAccessKey,\n            identityId: credentials.identityId,\n            authenticated: credentials.authenticated\n        };\n    };\n    return Credentials;\n}());\nexports.Credentials = Credentials;\nvar instance = new Credentials(null);\nexports.default = instance;\n"},"sourceMaps":{"js":{"version":3,"file":"Credentials.js","sourceRoot":"","sources":["../src/Credentials.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nimport StorageHelper from './StorageHelper';\nimport { AWS } from './Facet';\nimport JS from './JS';\nimport Platform from './Platform';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { ICredentials } from './types';\nimport Amplify from './Amplify';\n\nconst logger = new Logger('Credentials');\n\nexport class Credentials {\n    private _config;\n    private _credentials;\n    private _credentials_source;\n    private _gettingCredPromise = null;\n    private _refreshHandlers = {};\n    private _storage;\n    private _storageSync;\n\n    constructor(config) {\n        this.configure(config);\n        this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n        this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n    }\n\n    public getCredSource() {\n        return this._credentials_source;\n    }\n\n    public configure(config){\n        if (!config) return this._config || {};\n\n        this._config = Object.assign({}, this._config, config);\n        const { refreshHandlers } = this._config;\n         // If the developer has provided an object of refresh handlers,\n        // then we can merge the provided handlers with the current handlers.\n        if (refreshHandlers) {\n            this._refreshHandlers = { ...this._refreshHandlers,  ...refreshHandlers };\n        }\n\n        this._storage = this._config.storage;\n        if (!this._storage) {\n            this._storage = new StorageHelper().getStorage();\n        }\n        \n        this._storageSync = Promise.resolve();\n        if (typeof this._storage['sync'] === 'function') {\n            this._storageSync = this._storage['sync']();\n        }\n\n        return this._config;\n    }\n\n    public get() {\n        logger.debug('getting credentials');\n        return this._pickupCredentials();\n    }\n\n    private _pickupCredentials() {\n        logger.debug('picking up credentials');\n        if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n            logger.debug('getting new cred promise');\n            if (AWS.config && AWS.config.credentials && AWS.config.credentials instanceof AWS.Credentials) {\n                this._gettingCredPromise = JS.makeQuerablePromise(this._setCredentialsFromAWS());\n            } else {\n                this._gettingCredPromise = JS.makeQuerablePromise(this._keepAlive());\n            }\n        } else {\n            logger.debug('getting old cred promise');\n        }\n\n        return this._gettingCredPromise;\n    }\n\n    private _keepAlive() {\n        logger.debug('checking if credentials exists and not expired');\n        const cred = this._credentials;\n        if (cred && !this._isExpired(cred)) {\n            logger.debug('credentials not changed and not expired, directly return');\n            return Promise.resolve(cred);\n        }\n\n        logger.debug('need to get a new credential or refresh the existing one');\n        if (Amplify.Auth && typeof Amplify.Auth.currentUserCredentials === 'function') {\n            return Amplify.Auth.currentUserCredentials();\n        } else {\n            return Promise.reject('No Auth module registered in Amplify');\n        }\n    }\n\n    public refreshFederatedToken(federatedInfo) {\n        logger.debug('Getting federated credentials');\n        const { provider, user } = federatedInfo;\n        let token = federatedInfo.token;\n        let expires_at = federatedInfo.expires_at;\n        let identity_id = federatedInfo.identity_id;\n\n        const that = this;\n        logger.debug('checking if federated jwt token expired');\n        if (expires_at > new Date().getTime()) {\n            // if not expired\n            logger.debug('token not expired');\n            return this._setCredentialsFromFederation({provider, token, user, identity_id, expires_at });\n        } else {\n            // if refresh handler exists\n            if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n                logger.debug('getting refreshed jwt token from federation provider');\n                return that._refreshHandlers[provider]().then((data) => {\n                    logger.debug('refresh federated token sucessfully', data);\n                    token = data.token;\n                    identity_id = data.identity_id;\n                    expires_at = data.expires_at;\n                    \n                    return that._setCredentialsFromFederation({ provider, token, user, identity_id, expires_at });\n                }).catch(e => {\n                    logger.debug('refresh federated token failed', e);\n                    this.clear();\n                    return Promise.reject('refreshing federation token failed: ' + e);\n                });\n            } else {\n                logger.debug('no refresh handler for provider:', provider);\n                this.clear();\n                return Promise.reject('no refresh handler for provider');\n            }\n        }\n    }\n\n    private _isExpired(credentials): boolean {\n        if (!credentials) {\n            logger.debug('no credentials for expiration check');\n            return true;\n        }\n        logger.debug('is this credentials expired?', credentials);\n        const ts = new Date().getTime();\n        const delta = 10 * 60 * 1000; // 10 minutes\n        const { expired, expireTime } = credentials;\n        if (!expired && expireTime > ts + delta) {\n            return false;\n        }\n        return true;\n    }\n\n    private async _setCredentialsForGuest() {\n        let attempted = false;\n        logger.debug('setting credentials for guest');\n        const { identityPoolId, region, mandatorySignIn } = this._config;\n        if (mandatorySignIn) {\n            return Promise.reject('cannot get guest credentials when mandatory signin enabled');\n        }\n\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        \n        let identityId = undefined;\n        try {\n            await this._storageSync;\n            identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n        } catch (e) {\n            logger.debug('Failed to get the cached identityId', e);\n        }\n        \n        const credentials = new AWS.CognitoIdentityCredentials(\n            {\n            IdentityPoolId: identityPoolId,\n            IdentityId: identityId? identityId: undefined\n        },  {\n            region\n        });\n\n        const that = this;\n        return this._loadCredentials(credentials, 'guest', false, null)\n        .then((res) => {\n            return res;\n         })\n        .catch(async (e) => {\n            // If identity id is deleted in the console, we make one attempt to recreate it\n            // and remove existing id from cache. \n            if (e.code === 'ResourceNotFoundException' &&\n                e.message === `Identity '${identityId}' not found.`\n                && !attempted) {\n                attempted = true;\n                logger.debug('Failed to load guest credentials');\n                this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n                credentials.clearCachedId();\n                const newCredentials = new AWS.CognitoIdentityCredentials(\n                    {\n                        IdentityPoolId: identityPoolId,\n                        IdentityId: undefined\n                    },  \n                    {\n                        region\n                    }\n                );\n                return this._loadCredentials(newCredentials, 'guest', false, null);\n            } else {\n                return e;\n            }\n        });\n    }\n\n    private _setCredentialsFromAWS() {\n        const credentials = AWS.config.credentials;\n        logger.debug('setting credentials from aws');\n        const that = this;\n        if (credentials instanceof AWS.Credentials){\n            return Promise.resolve(credentials);\n        } else {\n            logger.debug('AWS.config.credentials is not an instance of AWS Credentials');\n            return Promise.reject('AWS.config.credentials is not an instance of AWS Credentials');\n        }\n    }\n\n    private _setCredentialsFromFederation(params) {\n        const { provider, token, identity_id, user, expires_at } = params;\n        const domains = {\n            'google': 'accounts.google.com',\n            'facebook': 'graph.facebook.com',\n            'amazon': 'www.amazon.com',\n            'developer': 'cognito-identity.amazonaws.com'\n        };\n\n        // Use custom provider url instead of the predefined ones\n        const domain = domains[provider] || provider;\n        if (!domain) {\n            return Promise.reject('You must specify a federated provider');\n        }\n\n        const logins = {};\n        logins[domain] = token;\n\n        const { identityPoolId, region } = this._config;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        const credentials = new AWS.CognitoIdentityCredentials(\n            {\n            IdentityPoolId: identityPoolId,\n            IdentityId: identity_id,\n            Logins: logins\n        },  {\n            region\n        });\n\n        return this._loadCredentials(\n            credentials, \n            'federated', \n            true, \n            params,\n        );\n    }\n\n    private _setCredentialsFromSession(session): Promise<ICredentials> {\n        logger.debug('set credentials from session');\n        const idToken = session.getIdToken().getJwtToken();\n        const { region, userPoolId, identityPoolId } = this._config;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        const key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n        const logins = {};\n        logins[key] = idToken;\n        const credentials = new AWS.CognitoIdentityCredentials(\n            {\n            IdentityPoolId: identityPoolId,\n            Logins: logins\n        },  {\n            region\n        });\n\n        const that = this;\n        return this._loadCredentials(credentials, 'userPool', true, null);\n    }\n\n    private _loadCredentials(credentials, source, authenticated, info): Promise<ICredentials> {\n        const that = this;\n        const { identityPoolId } = this._config;\n        return new Promise((res, rej) => {\n            credentials.get(async (err) => {\n                if (err) {\n                    logger.debug('Failed to load credentials', credentials);\n                    rej(err);\n                    return;\n                }\n\n                logger.debug('Load credentials successfully', credentials);\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                if (source === 'federated') {\n                    const user = Object.assign(\n                        { id: this._credentials.identityId },\n                        info.user\n                    );\n                    const { provider, token, expires_at, identity_id } = info;\n                    try {\n                        this._storage.setItem(\n                            'aws-amplify-federatedInfo',\n                            JSON.stringify({\n                                provider, \n                                token, \n                                user, \n                                expires_at, \n                                identity_id \n                            })\n                        );\n                    } catch(e) {\n                        logger.debug('Failed to put federated info into auth storage', e);\n                    }\n                    // the Cache module no longer stores federated info\n                    // this is just for backward compatibility\n                    if (Amplify.Cache && typeof Amplify.Cache.setItem === 'function'){\n                        Amplify.Cache.setItem(\n                            'federatedInfo', \n                            { \n                                provider, \n                                token, \n                                user, \n                                expires_at, \n                                identity_id \n                            }, \n                            { priority: 1 }\n                        );\n                    } else {\n                        logger.debug('No Cache module registered in Amplify');\n                    }\n                }\n                if (source === 'guest') {\n                    try {\n                        await this._storageSync;\n                        this._storage.setItem(\n                            'CognitoIdentityId-' + identityPoolId, \n                            credentials.identityId\n                        );\n                    } catch (e) {\n                        logger.debug('Failed to cache identityId', e);\n                    }\n                }\n                res(that._credentials);\n                return;\n            });\n        });\n    }\n\n    public set(params, source): Promise<ICredentials> {\n        if (source === 'session') {\n            return this._setCredentialsFromSession(params);\n        } else if (source === 'federation') {\n            return this._setCredentialsFromFederation(params);\n        } else if (source === 'guest') {\n            return this._setCredentialsForGuest();\n        } else {\n            logger.debug('no source specified for setting credentials');\n            return Promise.reject('invalid source');\n        }\n    }\n\n    public async clear() {\n        const { identityPoolId, region } = this._config;\n        if (identityPoolId) {\n            // work around for cognito js sdk to ensure clearCacheId works\n            const credentials = new AWS.CognitoIdentityCredentials(\n                {\n                IdentityPoolId: identityPoolId\n            },  {\n                region\n            });\n            credentials.clearCachedId();\n        }\n        this._credentials = null;\n        this._credentials_source = null;\n        this._storage.removeItem('aws-amplify-federatedInfo');\n\n        // the Cache module no longer stores federated info\n        // this is just for backward compatibility\n        if (Amplify.Cache && typeof Amplify.Cache.setItem === 'function'){\n            await Amplify.Cache.removeItem('federatedInfo');\n        } else {\n            logger.debug('No Cache module registered in Amplify');\n        }\n    }\n\n    /**\n     * Compact version of credentials\n     * @param {Object} credentials\n     * @return {Object} - Credentials\n     */\n    public shear(credentials) {\n        return {\n            accessKeyId: credentials.accessKeyId,\n            sessionToken: credentials.sessionToken,\n            secretAccessKey: credentials.secretAccessKey,\n            identityId: credentials.identityId,\n            authenticated: credentials.authenticated\n        };\n    }\n}\n\nconst instance = new Credentials(null);\n\nexport default instance;\n"]}},"error":null,"hash":"ea84001c96a2e5fd0428ece8f0ff322b","cacheData":{"env":{}}}