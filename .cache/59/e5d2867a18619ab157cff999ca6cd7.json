{"id":"node_modules/@aws-amplify/storage/lib/Providers/AWSS3Provider.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\lib\\Providers\\AWSS3Provider.js.map","includedInParent":true,"mtime":1557861857000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\src\\Providers\\AWSS3Provider.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\package.json","includedInParent":true,"mtime":1560308010595},{"name":"@aws-amplify/core","loc":{"line":50,"column":21},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\lib\\Providers\\AWSS3Provider.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"},{"name":"aws-sdk/clients/s3","loc":{"line":51,"column":17},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\storage\\lib\\Providers\\AWSS3Provider.js","resolved":"C:\\home\\auth-kampo\\node_modules\\aws-sdk\\clients\\s3.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar core_1 = require(\"@aws-amplify/core\");\nvar S3 = require(\"aws-sdk/clients/s3\");\nvar logger = new core_1.ConsoleLogger('AWSS3Provider');\nvar AMPLIFY_SYMBOL = ((typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') ?\n    Symbol.for('amplify_default') : '@@amplify_default');\nvar dispatchStorageEvent = function (track, event, attrs, metrics, message) {\n    if (track) {\n        core_1.Hub.dispatch('storage', {\n            event: event,\n            data: { attrs: attrs, metrics: metrics },\n            message: message\n        }, 'Storage', AMPLIFY_SYMBOL);\n    }\n};\n/**\n * Provide storage methods to use AWS S3\n */\nvar AWSS3Provider = /** @class */ (function () {\n    /**\n     * Initialize Storage with AWS configurations\n     * @param {Object} config - Configuration object for storage\n     */\n    function AWSS3Provider(config) {\n        this._config = config ? config : {};\n        logger.debug('Storage Options', this._config);\n    }\n    /**\n     * get the category of the plugin\n     */\n    AWSS3Provider.prototype.getCategory = function () {\n        return AWSS3Provider.CATEGORY;\n    };\n    /**\n     * get provider name of the plugin\n     */\n    AWSS3Provider.prototype.getProviderName = function () {\n        return AWSS3Provider.PROVIDER_NAME;\n    };\n    /**\n     * Configure Storage part with aws configuration\n     * @param {Object} config - Configuration of the Storage\n     * @return {Object} - Current configuration\n     */\n    AWSS3Provider.prototype.configure = function (config) {\n        logger.debug('configure Storage', config);\n        if (!config)\n            return this._config;\n        var amplifyConfig = core_1.Parser.parseMobilehubConfig(config);\n        this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n        if (!this._config.bucket) {\n            logger.debug('Do not have bucket yet');\n        }\n        return this._config;\n    };\n    /**\n    * Get a presigned URL of the file or the object data when download:true\n    *\n    * @param {String} key - key of the object\n    * @param {Object} [config] - { level : private|protected|public, download: true|false }\n    * @return - A promise resolves to Amazon S3 presigned URL on success\n    */\n    AWSS3Provider.prototype.get = function (key, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, opt, bucket, region, credentials, level, download, track, expires, prefix, final_key, s3, params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        opt = Object.assign({}, this._config, config);\n                        bucket = opt.bucket, region = opt.region, credentials = opt.credentials, level = opt.level, download = opt.download, track = opt.track, expires = opt.expires;\n                        prefix = this._prefix(opt);\n                        final_key = prefix + key;\n                        s3 = this._createS3(opt);\n                        logger.debug('get ' + key + ' from ' + final_key);\n                        params = {\n                            Bucket: bucket,\n                            Key: final_key\n                        };\n                        if (download === true) {\n                            return [2 /*return*/, new Promise(function (res, rej) {\n                                    s3.getObject(params, function (err, data) {\n                                        if (err) {\n                                            dispatchStorageEvent(track, 'download', {\n                                                method: 'get',\n                                                result: 'failed'\n                                            }, null, \"Download failed with \" + err.message);\n                                            rej(err);\n                                        }\n                                        else {\n                                            dispatchStorageEvent(track, 'download', { method: 'get', result: 'success' }, { fileSize: Number(data.Body['length']) }, \"Download success for \" + key);\n                                            res(data);\n                                        }\n                                    });\n                                })];\n                        }\n                        if (expires) {\n                            params.Expires = expires;\n                        }\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                try {\n                                    var url = s3.getSignedUrl('getObject', params);\n                                    dispatchStorageEvent(track, 'getSignedUrl', { method: 'get', result: 'success' }, null, \"Signed URL: \" + url);\n                                    res(url);\n                                }\n                                catch (e) {\n                                    logger.warn('get signed url error', e);\n                                    dispatchStorageEvent(track, 'getSignedUrl', { method: 'get', result: 'failed' }, null, \"Could not get a signed URL for \" + key);\n                                    rej(e);\n                                }\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Put a file in S3 bucket specified to configure method\n     * @param {String} key - key of the object\n     * @param {Object} object - File to be put in Amazon S3 bucket\n     * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n     *  progressCallback: function }\n     * @return - promise resolves to object on success\n     */\n    AWSS3Provider.prototype.put = function (key, object, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, opt, bucket, region, credentials, level, track, progressCallback, contentType, contentDisposition, cacheControl, expires, metadata, tagging, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, type, prefix, final_key, s3, params, upload, data, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        opt = Object.assign({}, this._config, config);\n                        bucket = opt.bucket, region = opt.region, credentials = opt.credentials, level = opt.level, track = opt.track, progressCallback = opt.progressCallback;\n                        contentType = opt.contentType, contentDisposition = opt.contentDisposition, cacheControl = opt.cacheControl, expires = opt.expires, metadata = opt.metadata, tagging = opt.tagging;\n                        serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n                        type = contentType ? contentType : 'binary/octet-stream';\n                        prefix = this._prefix(opt);\n                        final_key = prefix + key;\n                        s3 = this._createS3(opt);\n                        logger.debug('put ' + key + ' to ' + final_key);\n                        params = {\n                            Bucket: bucket,\n                            Key: final_key,\n                            Body: object,\n                            ContentType: type\n                        };\n                        if (cacheControl) {\n                            params.CacheControl = cacheControl;\n                        }\n                        if (contentDisposition) {\n                            params.ContentDisposition = contentDisposition;\n                        }\n                        if (expires) {\n                            params.Expires = expires;\n                        }\n                        if (metadata) {\n                            params.Metadata = metadata;\n                        }\n                        if (tagging) {\n                            params.Tagging = tagging;\n                        }\n                        if (serverSideEncryption) {\n                            params.ServerSideEncryption = serverSideEncryption;\n                            if (SSECustomerAlgorithm) {\n                                params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n                            }\n                            if (SSECustomerKey) {\n                                params.SSECustomerKey = SSECustomerKey;\n                            }\n                            if (SSECustomerKeyMD5) {\n                                params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n                            }\n                            if (SSEKMSKeyId) {\n                                params.SSEKMSKeyId = SSEKMSKeyId;\n                            }\n                        }\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        upload = s3\n                            .upload(params)\n                            .on('httpUploadProgress', function (progress) {\n                            if (progressCallback) {\n                                if (typeof progressCallback === 'function') {\n                                    progressCallback(progress);\n                                }\n                                else {\n                                    logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n                                }\n                            }\n                        });\n                        return [4 /*yield*/, upload.promise()];\n                    case 3:\n                        data = _a.sent();\n                        logger.debug('upload result', data);\n                        dispatchStorageEvent(track, 'upload', { method: 'put', result: 'success' }, null, \"Upload success for \" + key);\n                        return [2 /*return*/, {\n                                key: data.Key.substr(prefix.length)\n                            }];\n                    case 4:\n                        e_1 = _a.sent();\n                        logger.warn(\"error uploading\", e_1);\n                        dispatchStorageEvent(track, 'upload', { method: 'put', result: 'failed' }, null, \"Error uploading \" + key);\n                        throw e_1;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Remove the object for specified key\n     * @param {String} key - key of the object\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves upon successful removal of the object\n     */\n    AWSS3Provider.prototype.remove = function (key, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, opt, bucket, region, credentials, level, track, prefix, final_key, s3, params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        opt = Object.assign({}, this._config, config);\n                        bucket = opt.bucket, region = opt.region, credentials = opt.credentials, level = opt.level, track = opt.track;\n                        prefix = this._prefix(opt);\n                        final_key = prefix + key;\n                        s3 = this._createS3(opt);\n                        logger.debug('remove ' + key + ' from ' + final_key);\n                        params = {\n                            Bucket: bucket,\n                            Key: final_key\n                        };\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                s3.deleteObject(params, function (err, data) {\n                                    if (err) {\n                                        dispatchStorageEvent(track, 'delete', { method: 'remove', result: 'failed' }, null, \"Deletion of \" + key + \" failed with \" + err);\n                                        rej(err);\n                                    }\n                                    else {\n                                        dispatchStorageEvent(track, 'delete', { method: 'remove', result: 'success' }, null, \"Deleted \" + key + \" successfully\");\n                                        res(data);\n                                    }\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * List bucket objects relative to the level and prefix specified\n     * @param {String} path - the path that contains objects\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves to list of keys for all objects in path\n     */\n    AWSS3Provider.prototype.list = function (path, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, opt, bucket, region, credentials, level, download, track, prefix, final_path, s3, params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        opt = Object.assign({}, this._config, config);\n                        bucket = opt.bucket, region = opt.region, credentials = opt.credentials, level = opt.level, download = opt.download, track = opt.track;\n                        prefix = this._prefix(opt);\n                        final_path = prefix + path;\n                        s3 = this._createS3(opt);\n                        logger.debug('list ' + path + ' from ' + final_path);\n                        params = {\n                            Bucket: bucket,\n                            Prefix: final_path\n                        };\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                s3.listObjects(params, function (err, data) {\n                                    if (err) {\n                                        logger.warn('list error', err);\n                                        dispatchStorageEvent(track, 'list', { method: 'list', result: 'failed' }, null, \"Listing items failed: \" + err.message);\n                                        rej(err);\n                                    }\n                                    else {\n                                        var list = data.Contents.map(function (item) {\n                                            return {\n                                                key: item.Key.substr(prefix.length),\n                                                eTag: item.ETag,\n                                                lastModified: item.LastModified,\n                                                size: item.Size\n                                            };\n                                        });\n                                        dispatchStorageEvent(track, 'list', { method: 'list', result: 'success' }, null, list.length + \" items returned from list operation\");\n                                        logger.debug('list', list);\n                                        res(list);\n                                    }\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AWSS3Provider.prototype._ensureCredentials = function () {\n        var _this = this;\n        return core_1.Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return false;\n            var cred = core_1.Credentials.shear(credentials);\n            logger.debug('set credentials for storage', cred);\n            _this._config.credentials = cred;\n            return true;\n        })\n            .catch(function (err) {\n            logger.warn('ensure credentials error', err);\n            return false;\n        });\n    };\n    /**\n     * @private\n     */\n    AWSS3Provider.prototype._prefix = function (config) {\n        var credentials = config.credentials, level = config.level;\n        var customPrefix = config.customPrefix || {};\n        var identityId = config.identityId || credentials.identityId;\n        var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n        var protectedPath = (customPrefix.protected !== undefined ?\n            customPrefix.protected : 'protected/') + identityId + '/';\n        var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n        switch (level) {\n            case 'private':\n                return privatePath;\n            case 'protected':\n                return protectedPath;\n            default:\n                return publicPath;\n        }\n    };\n    /**\n     * @private\n     */\n    AWSS3Provider.prototype._createS3 = function (config) {\n        var bucket = config.bucket, region = config.region, credentials = config.credentials;\n        return new S3({\n            apiVersion: '2006-03-01',\n            params: { Bucket: bucket },\n            signatureVersion: 'v4',\n            region: region,\n            credentials: credentials\n        });\n    };\n    AWSS3Provider.CATEGORY = 'Storage';\n    AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n    return AWSS3Provider;\n}());\nexports.default = AWSS3Provider;\n"},"sourceMaps":{"js":{"version":3,"file":"AWSS3Provider.js","sourceRoot":"","sources":["../../src/Providers/AWSS3Provider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n    ConsoleLogger as Logger,\n    Hub,\n    Credentials,\n    Parser\n} from '@aws-amplify/core';\nimport * as S3 from 'aws-sdk/clients/s3';\nimport { StorageOptions, StorageProvider } from '../types';\n\nconst logger = new Logger('AWSS3Provider');\n\nconst AMPLIFY_SYMBOL = ((typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') ?\n    Symbol.for('amplify_default') : '@@amplify_default') as Symbol;\n\nconst dispatchStorageEvent = (track:boolean, event:string, attrs:any, metrics:any, message:string) => {\n    if (track) {\n        Hub.dispatch(\n            'storage', \n            { \n                event,\n                data: { attrs, metrics },\n                message\n            }, \n            'Storage', \n            AMPLIFY_SYMBOL\n        );\n    }\n};\n\n/**\n * Provide storage methods to use AWS S3\n */\nexport default class AWSS3Provider implements StorageProvider{\n\n    static CATEGORY = 'Storage';\n    static PROVIDER_NAME = 'AWSS3';\n\n    /**\n     * @private\n     */\n    private _config;\n\n    /**\n     * Initialize Storage with AWS configurations\n     * @param {Object} config - Configuration object for storage\n     */\n    constructor(config?: StorageOptions) {\n        this._config = config ? config: {};\n        logger.debug('Storage Options', this._config);\n    }\n\n    /**\n     * get the category of the plugin\n     */\n    public getCategory(): string {\n        return AWSS3Provider.CATEGORY;\n    }\n\n    /**\n     * get provider name of the plugin\n     */\n    getProviderName(): string {\n        return AWSS3Provider.PROVIDER_NAME;\n    }\n\n    /**\n     * Configure Storage part with aws configuration\n     * @param {Object} config - Configuration of the Storage\n     * @return {Object} - Current configuration\n     */\n    public configure(config?): object {\n        logger.debug('configure Storage', config);\n        if (!config) return this._config;\n        const amplifyConfig = Parser.parseMobilehubConfig(config);\n        this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n        if (!this._config.bucket) { logger.debug('Do not have bucket yet'); }\n        return this._config;\n    }\n\n    /**\n    * Get a presigned URL of the file or the object data when download:true\n    *\n    * @param {String} key - key of the object\n    * @param {Object} [config] - { level : private|protected|public, download: true|false }\n    * @return - A promise resolves to Amazon S3 presigned URL on success\n    */\n    public async get(key: string, config?): Promise<String|Object> {\n        const credentialsOK = await this._ensureCredentials();\n        if (!credentialsOK) { return Promise.reject('No credentials'); }\n\n        const opt = Object.assign({}, this._config, config);\n        const { bucket, region, credentials, level, download, track, expires } = opt;\n        const prefix = this._prefix(opt);\n        const final_key = prefix + key;\n        const s3 = this._createS3(opt);\n        logger.debug('get ' + key + ' from ' + final_key);\n\n        const params: any = {\n            Bucket: bucket,\n            Key: final_key\n        };\n\n        if (download === true) {\n            return new Promise<any>((res, rej) => {\n                s3.getObject(params, (err, data) => {\n                    if (err) {\n                        dispatchStorageEvent(\n                            track,\n                            'download',\n                            { \n                                method: 'get', \n                                result: 'failed'\n                            },\n                            null,\n                            `Download failed with ${err.message}`\n                        );\n                        rej(err);\n                    } else {\n                        dispatchStorageEvent(\n                            track,\n                            'download',\n                            { method: 'get', result: 'success' },\n                            { fileSize: Number(data.Body['length']) },\n                            `Download success for ${key}`\n                            );\n                        res(data);\n                    }\n                });\n            });\n        }\n\n        if (expires) { params.Expires = expires; }\n\n        return new Promise<string>((res, rej) => {\n            try {\n                const url = s3.getSignedUrl('getObject', params);\n                dispatchStorageEvent(\n                    track,\n                    'getSignedUrl',\n                    { method: 'get', result: 'success' },\n                    null, \n                    `Signed URL: ${url}`\n                );\n                res(url);\n            } catch (e) {\n                logger.warn('get signed url error', e);\n                dispatchStorageEvent(\n                    track,\n                    'getSignedUrl',\n                    { method: 'get', result: 'failed' },\n                    null,\n                    `Could not get a signed URL for ${key}`\n                );\n                rej(e);\n            }\n        });\n    }\n\n    /**\n     * Put a file in S3 bucket specified to configure method\n     * @param {String} key - key of the object\n     * @param {Object} object - File to be put in Amazon S3 bucket\n     * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n     *  progressCallback: function }\n     * @return - promise resolves to object on success\n     */\n    public async put(key: string, object, config?): Promise<Object> {\n        const credentialsOK = await this._ensureCredentials();\n        if (!credentialsOK) { return Promise.reject('No credentials'); }\n\n        const opt = Object.assign({}, this._config, config);\n        const { bucket, region, credentials, level, track, progressCallback } = opt;\n        const { contentType, contentDisposition, cacheControl, expires, metadata, tagging } = opt;\n        const { serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId } = opt;\n        const type = contentType ? contentType : 'binary/octet-stream';\n\n        const prefix = this._prefix(opt);\n        const final_key = prefix + key;\n        const s3 = this._createS3(opt);\n        logger.debug('put ' + key + ' to ' + final_key);\n\n        const params: any = {\n            Bucket: bucket,\n            Key: final_key,\n            Body: object,\n            ContentType: type\n        };\n        if (cacheControl) { params.CacheControl = cacheControl; }\n        if (contentDisposition) { params.ContentDisposition = contentDisposition; }\n        if (expires) { params.Expires = expires; }\n        if (metadata) { params.Metadata = metadata; }\n        if (tagging) { params.Tagging = tagging; }\n        if (serverSideEncryption) {\n            params.ServerSideEncryption = serverSideEncryption;\n            if (SSECustomerAlgorithm) { params.SSECustomerAlgorithm = SSECustomerAlgorithm; }\n            if (SSECustomerKey) { params.SSECustomerKey = SSECustomerKey; }\n            if (SSECustomerKeyMD5) { params.SSECustomerKeyMD5 = SSECustomerKeyMD5; }\n            if (SSEKMSKeyId) { params.SSEKMSKeyId = SSEKMSKeyId; }\n        }\n\n        try {\n            const upload = s3\n                .upload(params)\n                .on('httpUploadProgress', progress => {\n                    if (progressCallback) {\n                        if (typeof progressCallback === 'function') {\n                            progressCallback(progress);\n                        } else {\n                            logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n                        }\n                    }\n                });\n            const data = await upload.promise();\n\n            logger.debug('upload result', data);\n            dispatchStorageEvent(\n                track,\n                'upload',\n                { method: 'put', result: 'success' },\n                null,\n                `Upload success for ${key}`\n            );\n\n            return {\n                key: data.Key.substr(prefix.length)\n            };\n        } catch (e) {\n            logger.warn(\"error uploading\", e);\n            dispatchStorageEvent(\n                track,\n                'upload',\n                { method: 'put', result: 'failed' },\n                null,\n                `Error uploading ${key}`\n            );\n\n            throw e;\n        }\n    }\n\n    /**\n     * Remove the object for specified key\n     * @param {String} key - key of the object\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves upon successful removal of the object\n     */\n    public async remove(key: string, config?): Promise<any> {\n        const credentialsOK = await this._ensureCredentials();\n        if (!credentialsOK) { return Promise.reject('No credentials'); }\n\n        const opt = Object.assign({}, this._config, config, );\n        const { bucket, region, credentials, level, track } = opt;\n\n        const prefix = this._prefix(opt);\n        const final_key = prefix + key;\n        const s3 = this._createS3(opt);\n        logger.debug('remove ' + key + ' from ' + final_key);\n\n        const params = {\n            Bucket: bucket,\n            Key: final_key\n        };\n\n        return new Promise<any>((res, rej) => {\n            s3.deleteObject(params, (err, data) => {\n                if (err) {\n                    dispatchStorageEvent(\n                        track,\n                        'delete',\n                        { method: 'remove', result: 'failed' },\n                        null,\n                        `Deletion of ${key} failed with ${err}`\n                    );\n                    rej(err);\n                } else {\n                    dispatchStorageEvent(\n                        track,\n                        'delete',\n                        { method: 'remove', result: 'success' },\n                        null,\n                        `Deleted ${key} successfully`\n                    );\n                    res(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * List bucket objects relative to the level and prefix specified\n     * @param {String} path - the path that contains objects\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves to list of keys for all objects in path\n     */\n    public async list(path, config?): Promise<any> {\n        const credentialsOK = await this._ensureCredentials();\n        if (!credentialsOK) { return Promise.reject('No credentials'); }\n\n        const opt = Object.assign({}, this._config, config);\n        const { bucket, region, credentials, level, download, track } = opt;\n\n        const prefix = this._prefix(opt);\n        const final_path = prefix + path;\n        const s3 = this._createS3(opt);\n        logger.debug('list ' + path + ' from ' + final_path);\n\n        const params = {\n            Bucket: bucket,\n            Prefix: final_path\n        };\n\n        return new Promise<any>((res, rej) => {\n            s3.listObjects(params, (err, data) => {\n                if (err) {\n                    logger.warn('list error', err);\n                    dispatchStorageEvent(\n                        track,\n                        'list',\n                        { method: 'list', result: 'failed' },\n                        null,\n                        `Listing items failed: ${err.message}`\n                    );\n                    rej(err);\n                } else {\n                    const list = data.Contents.map(item => {\n                        return {\n                            key: item.Key.substr(prefix.length),\n                            eTag: item.ETag,\n                            lastModified: item.LastModified,\n                            size: item.Size\n                        };\n                    });\n                    dispatchStorageEvent(\n                        track,\n                        'list',\n                        { method: 'list', result: 'success' },\n                        null,\n                        `${list.length} items returned from list operation`\n                    );\n                    logger.debug('list', list);\n                    res(list);\n                }\n            });\n        });\n    }\n\n    /**\n     * @private\n     */\n    _ensureCredentials() {\n\n        return Credentials.get()\n            .then(credentials => {\n                if (!credentials) return false;\n                const cred = Credentials.shear(credentials);\n                logger.debug('set credentials for storage', cred);\n                this._config.credentials = cred;\n\n                return true;\n            })\n            .catch(err => {\n                logger.warn('ensure credentials error', err);\n                return false;\n            });\n    }\n\n    /**\n     * @private\n     */\n    private _prefix(config) {\n        const { credentials, level } = config;\n\n        const customPrefix = config.customPrefix || {};\n        const identityId = config.identityId || credentials.identityId;\n        const privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n        const protectedPath = (customPrefix.protected !== undefined ?\n            customPrefix.protected : 'protected/') + identityId + '/';\n        const publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n        switch (level) {\n            case 'private':\n                return privatePath;\n            case 'protected':\n                return protectedPath;\n            default:\n                return publicPath;\n        }\n    }\n\n    /**\n     * @private\n     */\n    private _createS3(config) {\n        const { bucket, region, credentials } = config;\n        \n        return new S3({\n            apiVersion: '2006-03-01',\n            params: { Bucket: bucket },\n            signatureVersion: 'v4',\n            region,\n            credentials\n        });\n    }\n}\n"]}},"error":null,"hash":"3b482e35e45b888989a2617808cde7ea","cacheData":{"env":{}}}