{"id":"node_modules/@aws-amplify/cache/lib/StorageCache.js","dependencies":[{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\StorageCache.js.map","includedInParent":true,"mtime":1557861850000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\cache\\src\\StorageCache.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\cache\\package.json","includedInParent":true,"mtime":1560308010599},{"name":"./Utils","loc":{"line":15,"column":22},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\StorageCache.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\Utils\\index.js"},{"name":"@aws-amplify/core","loc":{"line":16,"column":21},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\cache\\lib\\StorageCache.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"}],"generated":{"js":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Utils_1 = require(\"./Utils\");\nvar core_1 = require(\"@aws-amplify/core\");\nvar logger = new core_1.ConsoleLogger('StorageCache');\n/**\n * Initialization of the cache\n *\n */\nvar StorageCache = /** @class */ (function () {\n    /**\n     * Initialize the cache\n     * @param config - the configuration of the cache\n     */\n    function StorageCache(config) {\n        this.config = Object.assign({}, config);\n        this.cacheCurSizeKey = this.config.keyPrefix + 'CurSize';\n        this.checkConfig();\n    }\n    StorageCache.prototype.getModuleName = function () {\n        return 'Cache';\n    };\n    StorageCache.prototype.checkConfig = function () {\n        // check configuration\n        if (!Utils_1.isInteger(this.config.capacityInBytes)) {\n            logger.error('Invalid parameter: capacityInBytes. It should be an Integer. Setting back to default.');\n            this.config.capacityInBytes = Utils_1.defaultConfig.capacityInBytes;\n        }\n        if (!Utils_1.isInteger(this.config.itemMaxSize)) {\n            logger.error('Invalid parameter: itemMaxSize. It should be an Integer. Setting back to default.');\n            this.config.itemMaxSize = Utils_1.defaultConfig.itemMaxSize;\n        }\n        if (!Utils_1.isInteger(this.config.defaultTTL)) {\n            logger.error('Invalid parameter: defaultTTL. It should be an Integer. Setting back to default.');\n            this.config.defaultTTL = Utils_1.defaultConfig.defaultTTL;\n        }\n        if (!Utils_1.isInteger(this.config.defaultPriority)) {\n            logger.error('Invalid parameter: defaultPriority. It should be an Integer. Setting back to default.');\n            this.config.defaultPriority = Utils_1.defaultConfig.defaultPriority;\n        }\n        if (this.config.itemMaxSize > this.config.capacityInBytes) {\n            logger.error('Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.');\n            this.config.itemMaxSize = Utils_1.defaultConfig.itemMaxSize;\n        }\n        if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {\n            logger.error('Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.');\n            this.config.defaultPriority = Utils_1.defaultConfig.defaultPriority;\n        }\n        if (Number(this.config.warningThreshold) > 1 || Number(this.config.warningThreshold) < 0) {\n            logger.error('Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.');\n            this.config.warningThreshold = Utils_1.defaultConfig.warningThreshold;\n        }\n        // set 5MB limit\n        var cacheLimit = 5 * 1024 * 1024;\n        if (this.config.capacityInBytes > cacheLimit) {\n            logger.error('Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.');\n            this.config.capacityInBytes = Utils_1.defaultConfig.capacityInBytes;\n        }\n    };\n    /**\n    * produce a JSON object with meta-data and data value\n    * @param value - the value of the item\n    * @param options - optional, the specified meta-data\n    *\n    * @return - the item which has the meta-data and the value\n    */\n    StorageCache.prototype.fillCacheItem = function (key, value, options) {\n        var ret = {\n            key: key,\n            data: value,\n            timestamp: Utils_1.getCurrTime(),\n            visitedTime: Utils_1.getCurrTime(),\n            priority: options.priority,\n            expires: options.expires,\n            type: typeof value,\n            byteSize: 0\n        };\n        ret.byteSize = Utils_1.getByteLength(JSON.stringify(ret));\n        // for accurate size\n        ret.byteSize = Utils_1.getByteLength(JSON.stringify(ret));\n        return ret;\n    };\n    /**\n     * set cache with customized configuration\n     * @param config - customized configuration\n     *\n     * @return - the current configuration\n     */\n    StorageCache.prototype.configure = function (config) {\n        if (!config) {\n            return this.config;\n        }\n        if (config.keyPrefix) {\n            logger.warn(\"Don't try to configure keyPrefix!\");\n        }\n        this.config = Object.assign({}, this.config, config, config.Cache);\n        this.checkConfig();\n        return this.config;\n    };\n    return StorageCache;\n}());\nexports.default = StorageCache;\n"},"sourceMaps":{"js":{"version":3,"file":"StorageCache.js","sourceRoot":"","sources":["../src/StorageCache.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport {\r\n    getCurrTime,\r\n    getByteLength,\r\n    defaultConfig,\r\n    isInteger\r\n} from './Utils';\r\n\r\nimport { CacheConfig, CacheItem, CacheItemOptions } from './types';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\n\r\nconst logger = new Logger('StorageCache');\r\n\r\n/**\r\n * Initialization of the cache\r\n *\r\n */\r\nexport default class StorageCache {\r\n    protected cacheCurSizeKey: string;\r\n    protected config: CacheConfig;\r\n\r\n    /**\r\n     * Initialize the cache\r\n     * @param config - the configuration of the cache\r\n     */\r\n    constructor(config: CacheConfig) {\r\n        this.config = Object.assign({}, config);\r\n        this.cacheCurSizeKey = this.config.keyPrefix + 'CurSize';\r\n        this.checkConfig();\r\n    }\r\n\r\n    public getModuleName() {\r\n        return 'Cache';\r\n    }\r\n\r\n    private checkConfig(): void {\r\n        // check configuration\r\n        if (!isInteger(this.config.capacityInBytes)) {\r\n            logger.error('Invalid parameter: capacityInBytes. It should be an Integer. Setting back to default.');\r\n            this.config.capacityInBytes = defaultConfig.capacityInBytes;\r\n        }\r\n\r\n        if (!isInteger(this.config.itemMaxSize)) {\r\n            logger.error('Invalid parameter: itemMaxSize. It should be an Integer. Setting back to default.');\r\n            this.config.itemMaxSize = defaultConfig.itemMaxSize;\r\n        }\r\n\r\n        if (!isInteger(this.config.defaultTTL)) {\r\n            logger.error('Invalid parameter: defaultTTL. It should be an Integer. Setting back to default.');\r\n            this.config.defaultTTL = defaultConfig.defaultTTL;\r\n        }\r\n\r\n        if (!isInteger(this.config.defaultPriority)) {\r\n            logger.error('Invalid parameter: defaultPriority. It should be an Integer. Setting back to default.');\r\n            this.config.defaultPriority = defaultConfig.defaultPriority;\r\n        }\r\n\r\n        if (this.config.itemMaxSize > this.config.capacityInBytes) {\r\n            logger.error(\r\n                'Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.'\r\n            );\r\n            this.config.itemMaxSize = defaultConfig.itemMaxSize;\r\n        }\r\n\r\n        if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {\r\n            logger.error('Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.');\r\n            this.config.defaultPriority = defaultConfig.defaultPriority;\r\n        }\r\n\r\n        if (Number(this.config.warningThreshold) > 1 || Number(this.config.warningThreshold) < 0) {\r\n            logger.error('Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.');\r\n            this.config.warningThreshold = defaultConfig.warningThreshold;\r\n        }\r\n        // set 5MB limit\r\n        const cacheLimit: number = 5 * 1024 * 1024;\r\n        if (this.config.capacityInBytes > cacheLimit) {\r\n            logger.error('Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.');\r\n            this.config.capacityInBytes = defaultConfig.capacityInBytes;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * produce a JSON object with meta-data and data value\r\n    * @param value - the value of the item\r\n    * @param options - optional, the specified meta-data\r\n    *\r\n    * @return - the item which has the meta-data and the value\r\n    */\r\n    protected fillCacheItem(\r\n        key: string, value: object | number | string | boolean,\r\n        options: CacheItemOptions): CacheItem {\r\n        const ret: CacheItem = {\r\n            key,\r\n            data: value,\r\n            timestamp: getCurrTime(),\r\n            visitedTime: getCurrTime(),\r\n            priority: options.priority,\r\n            expires: options.expires,\r\n            type: typeof value,\r\n            byteSize: 0\r\n        };\r\n\r\n        ret.byteSize = getByteLength(JSON.stringify(ret));\r\n\r\n        // for accurate size\r\n        ret.byteSize = getByteLength(JSON.stringify(ret));\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * set cache with customized configuration\r\n     * @param config - customized configuration\r\n     *\r\n     * @return - the current configuration\r\n     */\r\n    public configure(config?: CacheConfig): CacheConfig {\r\n        if (!config) {\r\n            return this.config;\r\n        }\r\n        if (config.keyPrefix) {\r\n            logger.warn(`Don't try to configure keyPrefix!`);\r\n        }\r\n\r\n        this.config = Object.assign({}, this.config, config, config.Cache);\r\n        this.checkConfig();\r\n        return this.config;\r\n    }\r\n}\r\n"]}},"error":null,"hash":"8cd8794f0d99691ea777fce502ce6728","cacheData":{"env":{}}}