{"id":"node_modules/@aws-amplify/core/lib/Logger/ConsoleLogger.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Logger\\ConsoleLogger.js.map","includedInParent":true,"mtime":1557861835000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\src\\Logger\\ConsoleLogger.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\package.json","includedInParent":true,"mtime":1560308010599}],"generated":{"js":"\"use strict\";\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LOG_LEVELS = {\n    VERBOSE: 1,\n    DEBUG: 2,\n    INFO: 3,\n    WARN: 4,\n    ERROR: 5\n};\n/**\n* Write logs\n* @class Logger\n*/\nvar ConsoleLogger = /** @class */ (function () {\n    /**\n    * @constructor\n    * @param {string} name - Name of the logger\n    */\n    function ConsoleLogger(name, level) {\n        if (level === void 0) { level = 'WARN'; }\n        this.name = name;\n        this.level = level;\n    }\n    ConsoleLogger.prototype._padding = function (n) {\n        return n < 10 ? '0' + n : '' + n;\n    };\n    ConsoleLogger.prototype._ts = function () {\n        var dt = new Date();\n        return [\n            this._padding(dt.getMinutes()),\n            this._padding(dt.getSeconds())\n        ].join(':') + '.' + dt.getMilliseconds();\n    };\n    /**\n    * Write log\n    * @method\n    * @memeberof Logger\n    * @param {string} type - log type, default INFO\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype._log = function (type) {\n        var msg = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            msg[_i - 1] = arguments[_i];\n        }\n        var logger_level_name = this.level;\n        if (ConsoleLogger.LOG_LEVEL) {\n            logger_level_name = ConsoleLogger.LOG_LEVEL;\n        }\n        if ((typeof window !== 'undefined') && window.LOG_LEVEL) {\n            logger_level_name = window.LOG_LEVEL;\n        }\n        var logger_level = LOG_LEVELS[logger_level_name];\n        var type_level = LOG_LEVELS[type];\n        if (!(type_level >= logger_level)) {\n            // Do nothing if type is not greater than or equal to logger level (handle undefined)\n            return;\n        }\n        var log = console.log.bind(console);\n        if (type === 'ERROR' && console.error) {\n            log = console.error.bind(console);\n        }\n        if (type === 'WARN' && console.warn) {\n            log = console.warn.bind(console);\n        }\n        var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n        if (msg.length === 1 && typeof msg[0] === 'string') {\n            log(prefix + \" - \" + msg[0]);\n        }\n        else if (msg.length === 1) {\n            log(prefix, msg[0]);\n        }\n        else if (typeof msg[0] === 'string') {\n            var obj = msg.slice(1);\n            if (obj.length === 1) {\n                obj = obj[0];\n            }\n            log(prefix + \" - \" + msg[0], obj);\n        }\n        else {\n            log(prefix, msg);\n        }\n    };\n    /**\n    * Write General log. Default to INFO\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.log = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['INFO'].concat(msg));\n    };\n    /**\n    * Write INFO log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.info = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['INFO'].concat(msg));\n    };\n    /**\n    * Write WARN log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.warn = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['WARN'].concat(msg));\n    };\n    /**\n    * Write ERROR log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.error = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['ERROR'].concat(msg));\n    };\n    /**\n    * Write DEBUG log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.debug = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['DEBUG'].concat(msg));\n    };\n    /**\n    * Write VERBOSE log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.verbose = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['VERBOSE'].concat(msg));\n    };\n    ConsoleLogger.LOG_LEVEL = null;\n    return ConsoleLogger;\n}());\nexports.ConsoleLogger = ConsoleLogger;\n"},"sourceMaps":{"js":{"version":3,"file":"ConsoleLogger.js","sourceRoot":"","sources":["../../src/Logger/ConsoleLogger.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { Logger } from './logger-interface';\n\nconst LOG_LEVELS = {\n    VERBOSE: 1,\n    DEBUG: 2,\n    INFO: 3,\n    WARN: 4,\n    ERROR: 5\n};\n\n/**\n* Write logs\n* @class Logger\n*/\nexport class ConsoleLogger implements Logger {\n    name: string;\n    level: string;\n\n    /**\n    * @constructor\n    * @param {string} name - Name of the logger\n    */\n    constructor(name, level = 'WARN') {\n        this.name = name;\n        this.level = level;\n    }\n\n    static LOG_LEVEL = null;\n\n    _padding(n) {\n        return n < 10? '0' + n : '' + n;\n    }\n\n    _ts() {\n        const dt = new Date();\n        return [\n            this._padding(dt.getMinutes()),\n            this._padding(dt.getSeconds())\n        ].join(':') + '.' + dt.getMilliseconds();\n    }\n\n    /**\n    * Write log\n    * @method\n    * @memeberof Logger\n    * @param {string} type - log type, default INFO\n    * @param {string|object} msg - Logging message or object\n    */\n    _log(type: string, ...msg) {\n        let logger_level_name = this.level;\n        if (ConsoleLogger.LOG_LEVEL) { logger_level_name = ConsoleLogger.LOG_LEVEL; }\n        if ((typeof <any>window !== 'undefined') && (<any>window).LOG_LEVEL) {\n            logger_level_name = (<any>window).LOG_LEVEL;\n        }\n        const logger_level = LOG_LEVELS[logger_level_name];\n        const type_level = LOG_LEVELS[type];\n        if (!(type_level >= logger_level)) {\n            // Do nothing if type is not greater than or equal to logger level (handle undefined)\n            return;\n        }\n\n        let log = console.log.bind(console);\n        if (type === 'ERROR' && console.error) { log = console.error.bind(console); }\n        if (type === 'WARN' && console.warn) { log = console.warn.bind(console); }\n\n\t\tconst prefix = `[${type}] ${this._ts()} ${this.name}`;\n\n        if (msg.length === 1 && typeof msg[0] === 'string') {\n            log(`${prefix} - ${msg[0]}`);\n        } else if (msg.length === 1) {\n            log(prefix, msg[0]);\n        } else if (typeof msg[0] === 'string') {\n            let obj = msg.slice(1);\n            if (obj.length === 1) { obj = obj[0]; }\n            log(`${prefix} - ${msg[0]}`, obj);\n        } else {\n            log(prefix, msg);\n        }\n    }\n\n    /**\n    * Write General log. Default to INFO\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    log(...msg) { this._log('INFO', ...msg); }\n\n    /**\n    * Write INFO log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    info(...msg) { this._log('INFO', ...msg); }\n\n    /**\n    * Write WARN log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    warn(...msg) { this._log('WARN', ...msg); }\n\n    /**\n    * Write ERROR log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    error(...msg) { this._log('ERROR', ...msg); }\n\n    /**\n    * Write DEBUG log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    debug(...msg) { this._log('DEBUG', ...msg); }\n\n    /**\n    * Write VERBOSE log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    verbose(...msg) { this._log('VERBOSE', ...msg); }\n}\n"]}},"error":null,"hash":"a3557e7694e2418765d2903d516b28ce","cacheData":{"env":{}}}