{"id":"node_modules/@aws-amplify/xr/lib/Providers/SumerianProvider.js","dependencies":[{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\Providers\\SumerianProvider.js.map","includedInParent":true,"mtime":1557861868000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\xr\\src\\Providers\\SumerianProvider.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\xr\\package.json","includedInParent":true,"mtime":1560308010593},{"name":"@aws-amplify/core","loc":{"line":68,"column":21},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\Providers\\SumerianProvider.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"},{"name":"./XRProvider","loc":{"line":69,"column":27},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\Providers\\SumerianProvider.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\Providers\\XRProvider.js"},{"name":"../Errors","loc":{"line":70,"column":23},"parent":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\Providers\\SumerianProvider.js","resolved":"C:\\home\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\Errors.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar core_1 = require(\"@aws-amplify/core\");\nvar XRProvider_1 = require(\"./XRProvider\");\nvar Errors_1 = require(\"../Errors\");\nvar SUMERIAN_SERVICE_NAME = 'sumerian';\nvar logger = new core_1.ConsoleLogger('SumerianProvider');\nvar SumerianProvider = /** @class */ (function (_super) {\n    __extends(SumerianProvider, _super);\n    function SumerianProvider(options) {\n        if (options === void 0) { options = {}; }\n        return _super.call(this, options) || this;\n    }\n    SumerianProvider.prototype.getProviderName = function () { return 'SumerianProvider'; };\n    SumerianProvider.prototype.loadScript = function (url) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var scriptElement = document.createElement('script');\n                        scriptElement.src = url;\n                        scriptElement.addEventListener('load', function (event) {\n                            resolve();\n                        });\n                        scriptElement.addEventListener('error', function (event) {\n                            reject(new Error(\"Failed to load script: \" + url));\n                        });\n                        document.head.appendChild(scriptElement);\n                    })];\n            });\n        });\n    };\n    SumerianProvider.prototype.loadScene = function (sceneName, domElementId, sceneOptions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errorMsg, errorMsg, element, errorMsg, scene, errorMsg, sceneUrl, sceneId, sceneRegion, errorMsg, awsSDKConfigOverride, fetchOptions, url, credentials, accessInfo, serviceInfo, request, e_1, apiResponse, apiResponseJson, sceneBundleData, sceneBundle, sceneBundleJson, error_1, progressCallback, publishParamOverrides, sceneLoadParams, sceneController, _i, _a, warning;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!sceneName) {\n                            errorMsg = \"No scene name passed into loadScene\";\n                            logger.error(errorMsg);\n                            throw (new Errors_1.XRSceneLoadFailure(errorMsg));\n                        }\n                        if (!domElementId) {\n                            errorMsg = \"No dom element id passed into loadScene\";\n                            logger.error(errorMsg);\n                            throw (new Errors_1.XRNoDomElement(errorMsg));\n                        }\n                        element = document.getElementById(domElementId);\n                        if (!element) {\n                            errorMsg = \"DOM element id, \" + domElementId + \" not found\";\n                            logger.error(errorMsg);\n                            throw (new Errors_1.XRNoDomElement(errorMsg));\n                        }\n                        scene = this.getScene(sceneName);\n                        if (!scene.sceneConfig) {\n                            errorMsg = \"No scene config configured for scene: \" + sceneName;\n                            logger.error(errorMsg);\n                            throw (new Errors_1.XRSceneLoadFailure(errorMsg));\n                        }\n                        sceneUrl = scene.sceneConfig.url;\n                        sceneId = scene.sceneConfig.sceneId;\n                        if (scene.sceneConfig.hasOwnProperty('region')) {\n                            // Use the scene region on the Sumerian scene configuration\n                            sceneRegion = scene.sceneConfig.region;\n                        }\n                        else if (this.options.hasOwnProperty('region')) {\n                            // Use the scene region on the XR category configuration\n                            sceneRegion = this.options.region;\n                        }\n                        else {\n                            errorMsg = \"No region configured for scene: \" + sceneName;\n                            logger.error(errorMsg);\n                            throw (new Errors_1.XRSceneLoadFailure(errorMsg));\n                        }\n                        awsSDKConfigOverride = {\n                            region: sceneRegion,\n                            // This is passed to the AWS clients created in\n                            // Sumerian's AwsSystem\n                            // This helps other services(like Lex and Polly) to track\n                            // traffic coming from Sumerian scenes embedded with Amplify\n                            customUserAgent: core_1.Constants.userAgent + \"-SumerianScene\"\n                        };\n                        fetchOptions = {\n                            headers: {\n                                // This sets the AWS user agent string\n                                // So the Sumerian service knows this request is \n                                // from Amplify\n                                \"X-Amz-User-Agent\": core_1.Constants.userAgent\n                            }\n                        };\n                        url = sceneUrl;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, core_1.Credentials.get()];\n                    case 2:\n                        credentials = _b.sent();\n                        awsSDKConfigOverride[\"credentials\"] = credentials;\n                        accessInfo = {\n                            secret_key: credentials.secretAccessKey,\n                            access_key: credentials.accessKeyId,\n                            session_token: credentials.sessionToken,\n                        };\n                        serviceInfo = { region: sceneRegion, service: SUMERIAN_SERVICE_NAME };\n                        request = core_1.Signer.sign({ method: \"GET\", url: sceneUrl }, accessInfo, serviceInfo);\n                        fetchOptions.headers = __assign({}, fetchOptions.headers, request.headers);\n                        url = request.url;\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _b.sent();\n                        logger.debug('No credentials available, the request will be unsigned');\n                        return [3 /*break*/, 4];\n                    case 4: return [4 /*yield*/, fetch(url, fetchOptions)];\n                    case 5:\n                        apiResponse = _b.sent();\n                        return [4 /*yield*/, apiResponse.json()];\n                    case 6:\n                        apiResponseJson = _b.sent();\n                        if (apiResponse.status === 403) {\n                            if (apiResponseJson.message) {\n                                logger.error(\"Failure to authenticate user: \" + apiResponseJson.message);\n                                throw (new Errors_1.XRSceneLoadFailure(\"Failure to authenticate user: \" + apiResponseJson.message));\n                            }\n                            else {\n                                logger.error(\"Failure to authenticate user\");\n                                throw (new Errors_1.XRSceneLoadFailure(\"Failure to authenticate user\"));\n                            }\n                        }\n                        sceneBundleData = apiResponseJson.bundleData[sceneId];\n                        return [4 /*yield*/, fetch(sceneBundleData.url, { headers: sceneBundleData.headers })];\n                    case 7:\n                        sceneBundle = _b.sent();\n                        return [4 /*yield*/, sceneBundle.json()];\n                    case 8:\n                        sceneBundleJson = _b.sent();\n                        _b.label = 9;\n                    case 9:\n                        _b.trys.push([9, 11, , 12]);\n                        // Load the Sumerian bootstrapper script into the DOM\n                        return [4 /*yield*/, this.loadScript(sceneBundleJson[sceneId].bootstrapperUrl)];\n                    case 10:\n                        // Load the Sumerian bootstrapper script into the DOM\n                        _b.sent();\n                        return [3 /*break*/, 12];\n                    case 11:\n                        error_1 = _b.sent();\n                        logger.error(error_1);\n                        throw (new Errors_1.XRSceneLoadFailure(error_1));\n                    case 12:\n                        progressCallback = sceneOptions.progressCallback ? sceneOptions.progressCallback : undefined;\n                        publishParamOverrides = scene.publishParamOverrides ? scene.publishParamOverrides : undefined;\n                        sceneLoadParams = {\n                            element: element,\n                            sceneId: sceneId,\n                            sceneBundle: sceneBundleJson,\n                            apiResponse: apiResponseJson,\n                            progressCallback: progressCallback,\n                            publishParamOverrides: publishParamOverrides,\n                            awsSDKConfigOverride: awsSDKConfigOverride\n                        };\n                        return [4 /*yield*/, window.SumerianBootstrapper.loadScene(sceneLoadParams)];\n                    case 13:\n                        sceneController = _b.sent();\n                        scene.sceneController = sceneController;\n                        scene.isLoaded = true;\n                        // Log scene warnings\n                        for (_i = 0, _a = sceneController.sceneLoadWarnings; _i < _a.length; _i++) {\n                            warning = _a[_i];\n                            logger.warn(\"loadScene warning: \" + warning);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SumerianProvider.prototype.isSceneLoaded = function (sceneName) {\n        var scene = this.getScene(sceneName);\n        return scene.isLoaded || false;\n    };\n    SumerianProvider.prototype.getScene = function (sceneName) {\n        if (!this.options.scenes) {\n            var errorMsg = \"No scenes were defined in the configuration\";\n            logger.error(errorMsg);\n            throw (new Errors_1.XRNoSceneConfiguredError(errorMsg));\n        }\n        if (!sceneName) {\n            var errorMsg = \"No scene name was passed\";\n            logger.error(errorMsg);\n            throw (new Errors_1.XRSceneNotFoundError(errorMsg));\n        }\n        if (!this.options.scenes[sceneName]) {\n            var errorMsg = \"Scene '\" + sceneName + \"' is not configured\";\n            logger.error(errorMsg);\n            throw (new Errors_1.XRSceneNotFoundError(errorMsg));\n        }\n        return this.options.scenes[sceneName];\n    };\n    SumerianProvider.prototype.getSceneController = function (sceneName) {\n        if (!this.options.scenes) {\n            var errorMsg = \"No scenes were defined in the configuration\";\n            logger.error(errorMsg);\n            throw (new Errors_1.XRNoSceneConfiguredError(errorMsg));\n        }\n        var scene = this.options.scenes[sceneName];\n        if (!scene) {\n            var errorMsg = \"Scene '\" + sceneName + \"' is not configured\";\n            logger.error(errorMsg);\n            throw (new Errors_1.XRSceneNotFoundError(errorMsg));\n        }\n        var sceneController = scene.sceneController;\n        if (!sceneController) {\n            var errorMsg = \"Scene controller for '\" + sceneName + \"' has not been loaded\";\n            logger.error(errorMsg);\n            throw (new Errors_1.XRSceneNotLoadedError(errorMsg));\n        }\n        return sceneController;\n    };\n    SumerianProvider.prototype.isVRCapable = function (sceneName) {\n        var sceneController = this.getSceneController(sceneName);\n        return sceneController.vrCapable;\n    };\n    SumerianProvider.prototype.isVRPresentationActive = function (sceneName) {\n        var sceneController = this.getSceneController(sceneName);\n        return sceneController.vrPresentationActive;\n    };\n    SumerianProvider.prototype.start = function (sceneName) {\n        var sceneController = this.getSceneController(sceneName);\n        sceneController.start();\n    };\n    SumerianProvider.prototype.enterVR = function (sceneName) {\n        var sceneController = this.getSceneController(sceneName);\n        sceneController.enterVR();\n    };\n    SumerianProvider.prototype.exitVR = function (sceneName) {\n        var sceneController = this.getSceneController(sceneName);\n        sceneController.exitVR();\n    };\n    SumerianProvider.prototype.isMuted = function (sceneName) {\n        var sceneController = this.getSceneController(sceneName);\n        return sceneController.muted;\n    };\n    SumerianProvider.prototype.setMuted = function (sceneName, muted) {\n        var sceneController = this.getSceneController(sceneName);\n        sceneController.muted = muted;\n    };\n    SumerianProvider.prototype.onSceneEvent = function (sceneName, eventName, eventHandler) {\n        var sceneController = this.getSceneController(sceneName);\n        sceneController.on(eventName, eventHandler);\n    };\n    SumerianProvider.prototype.enableAudio = function (sceneName) {\n        var sceneController = this.getSceneController(sceneName);\n        sceneController.enableAudio();\n    };\n    return SumerianProvider;\n}(XRProvider_1.AbstractXRProvider));\nexports.SumerianProvider = SumerianProvider;\n"},"sourceMaps":{"js":{"version":3,"file":"SumerianProvider.js","sourceRoot":"","sources":["../../src/Providers/SumerianProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger, Signer, Credentials, Constants } from '@aws-amplify/core';\n\nimport { AbstractXRProvider } from './XRProvider';\nimport { ProviderOptions, SceneOptions } from '../types';\nimport { \n  XRNoSceneConfiguredError,\n  XRSceneNotFoundError,\n  XRSceneNotLoadedError,\n  XRNoDomElement,\n  XRSceneLoadFailure\n} from '../Errors';\n\ntype SumerianSceneOptions = SceneOptions & { progressCallback: Function };\n\nconst SUMERIAN_SERVICE_NAME = 'sumerian';\n\nconst logger = new Logger('SumerianProvider');\n\nexport class SumerianProvider extends AbstractXRProvider {\n  constructor(options: ProviderOptions = {}) {\n    super(options);\n  }\n\n  getProviderName() { return 'SumerianProvider'; }\n\n  private async loadScript(url) {\n    return new Promise((resolve, reject) => {\n        const scriptElement = document.createElement('script');\n        scriptElement.src = url;\n\n        scriptElement.addEventListener('load', (event) => {\n            resolve();\n        });\n\n        scriptElement.addEventListener('error', (event) => {\n            reject(new Error(`Failed to load script: ${url}`));\n        });\n\n        document.head.appendChild(scriptElement);\n    });\n  }\n\n  public async loadScene(sceneName: string, domElementId: string, sceneOptions: SumerianSceneOptions) { \n\n    if (!sceneName) {\n      const errorMsg = \"No scene name passed into loadScene\";\n      logger.error(errorMsg);\n      throw(new XRSceneLoadFailure(errorMsg));\n    }\n    \n    if (!domElementId) {\n      const errorMsg = \"No dom element id passed into loadScene\";\n      logger.error(errorMsg);\n      throw(new XRNoDomElement(errorMsg));\n    }\n\n    const element = document.getElementById(domElementId);\n    if (!element) {\n        const errorMsg = `DOM element id, ${domElementId} not found`;\n        logger.error(errorMsg);\n        throw(new XRNoDomElement(errorMsg));\n    }\n\n    const scene = this.getScene(sceneName);\n    if (!scene.sceneConfig) {\n      const errorMsg = `No scene config configured for scene: ${sceneName}`;\n      logger.error(errorMsg);\n      throw(new XRSceneLoadFailure(errorMsg));\n    }\n\n    const sceneUrl = scene.sceneConfig.url;\n    const sceneId = scene.sceneConfig.sceneId;\n\n    let sceneRegion;\n    if(scene.sceneConfig.hasOwnProperty('region')) {\n      // Use the scene region on the Sumerian scene configuration\n      sceneRegion = scene.sceneConfig.region;\n    } else if (this.options.hasOwnProperty('region')) {\n      // Use the scene region on the XR category configuration\n      sceneRegion = this.options.region;\n    } else {\n      const errorMsg = `No region configured for scene: ${sceneName}`;\n      logger.error(errorMsg);\n      throw(new XRSceneLoadFailure(errorMsg));\n    }\n\n    const awsSDKConfigOverride = {\n        region: sceneRegion,\n        // This is passed to the AWS clients created in\n        // Sumerian's AwsSystem\n        // This helps other services(like Lex and Polly) to track\n        // traffic coming from Sumerian scenes embedded with Amplify\n        customUserAgent: `${Constants.userAgent}-SumerianScene`\n    };\n\n    // We are signing the requests to Sumerian ourselves instead of using the AWS SDK\n    // We want to set the user agent header\n    const fetchOptions = {\n      headers: {\n        // This sets the AWS user agent string\n        // So the Sumerian service knows this request is \n        // from Amplify\n        \"X-Amz-User-Agent\": Constants.userAgent\n      }\n    };\n\n    let url = sceneUrl;\n    try {\n      // Get credentials from Auth and sign the request\n      const credentials = await Credentials.get();\n      awsSDKConfigOverride[\"credentials\"] = credentials;\n      const accessInfo = {\n        secret_key: credentials.secretAccessKey,\n        access_key: credentials.accessKeyId,\n        session_token: credentials.sessionToken,\n      };\n      \n      const serviceInfo = { region: sceneRegion, service: SUMERIAN_SERVICE_NAME };\n      const request = Signer.sign({ method: \"GET\", url: sceneUrl }, accessInfo, serviceInfo);\n      fetchOptions.headers = {...fetchOptions.headers, ...request.headers};\n      url = request.url;\n    } catch (e) {\n      logger.debug('No credentials available, the request will be unsigned');\n    }\n\n    const apiResponse = await fetch(url, fetchOptions);\n    const apiResponseJson = await apiResponse.json();\n    if (apiResponse.status === 403) {\n      if (apiResponseJson.message) {\n        logger.error(`Failure to authenticate user: ${apiResponseJson.message}`);\n        throw(new XRSceneLoadFailure(`Failure to authenticate user: ${apiResponseJson.message}`));\n      } else {\n        logger.error(`Failure to authenticate user`);\n        throw(new XRSceneLoadFailure(`Failure to authenticate user`));\n      }\n    }\n    \n    // Get bundle data from scene api response\n    const sceneBundleData = apiResponseJson.bundleData[sceneId];\n    const sceneBundle = await fetch(sceneBundleData.url, { headers : sceneBundleData.headers });\n    const sceneBundleJson = await sceneBundle.json();\n\n    try {\n      // Load the Sumerian bootstrapper script into the DOM\n      await this.loadScript(sceneBundleJson[sceneId].bootstrapperUrl);\n    } catch(error) {\n      logger.error(error);\n      throw(new XRSceneLoadFailure(error));\n    }\n\n    const progressCallback = sceneOptions.progressCallback ? sceneOptions.progressCallback : undefined;\n    const publishParamOverrides = scene.publishParamOverrides ? scene.publishParamOverrides : undefined;\n\n    const sceneLoadParams = {\n      element,\n      sceneId,\n      sceneBundle: sceneBundleJson,\n      apiResponse: apiResponseJson,\n      progressCallback,\n      publishParamOverrides,\n      awsSDKConfigOverride\n    };\n\n    // Load the scene into the dom and set the scene controller\n    const sceneController = await (<any>window).SumerianBootstrapper.loadScene(sceneLoadParams);\n    scene.sceneController = sceneController;\n    scene.isLoaded = true;\n\n    // Log scene warnings\n    for (const warning of sceneController.sceneLoadWarnings) {\n      logger.warn(`loadScene warning: ${warning}`);\n    }\n  }\n\n  public isSceneLoaded(sceneName: string) {\n    const scene = this.getScene(sceneName);\n    return scene.isLoaded || false;\n  }\n\n  private getScene(sceneName: string) {\n    if (!this.options.scenes) {\n      const errorMsg = \"No scenes were defined in the configuration\";\n      logger.error(errorMsg);\n      throw(new XRNoSceneConfiguredError(errorMsg));\n    }\n\n    if (!sceneName) {\n      const errorMsg = \"No scene name was passed\";\n      logger.error(errorMsg);\n      throw(new XRSceneNotFoundError(errorMsg));\n    }\n\n    if (!this.options.scenes[sceneName]) {\n      const errorMsg = `Scene '${sceneName}' is not configured`;\n      logger.error(errorMsg);\n      throw(new XRSceneNotFoundError(errorMsg));\n    }\n\n    return this.options.scenes[sceneName];\n  }\n\n  public getSceneController(sceneName: string) {\n    if (!this.options.scenes) {\n      const errorMsg = \"No scenes were defined in the configuration\";\n      logger.error(errorMsg);\n      throw(new XRNoSceneConfiguredError(errorMsg));\n    }\n\n    const scene = this.options.scenes[sceneName];\n    if (!scene) {\n      const errorMsg = `Scene '${sceneName}' is not configured`;\n      logger.error(errorMsg);\n      throw(new XRSceneNotFoundError(errorMsg));\n    }\n\n    const sceneController = scene.sceneController;\n    if (!sceneController) {\n      const errorMsg = `Scene controller for '${sceneName}' has not been loaded`;\n      logger.error(errorMsg);\n      throw(new XRSceneNotLoadedError(errorMsg));\n    }\n\n    return sceneController;\n  }\n\n  public isVRCapable(sceneName: string): boolean {\n    const sceneController = this.getSceneController(sceneName);\n    return sceneController.vrCapable;\n  }\n\n  public isVRPresentationActive(sceneName: string): boolean {\n    const sceneController = this.getSceneController(sceneName);\n    return sceneController.vrPresentationActive;\n  }\n\n  public start(sceneName: string) {\n    const sceneController = this.getSceneController(sceneName);\n    sceneController.start();\n  }\n\n  public enterVR(sceneName: string) {\n    const sceneController = this.getSceneController(sceneName);\n    sceneController.enterVR();\n  }\n\n  public exitVR(sceneName: string) {\n    const sceneController = this.getSceneController(sceneName);\n    sceneController.exitVR();\n  }\n\n  public isMuted(sceneName: string): boolean {\n    const sceneController = this.getSceneController(sceneName);\n    return sceneController.muted;\n  }\n\n  public setMuted(sceneName: string, muted: boolean) {\n    const sceneController = this.getSceneController(sceneName);\n    sceneController.muted = muted;\n  }\n\n  public onSceneEvent(sceneName: string, eventName: string, eventHandler: Function) {\n    const sceneController = this.getSceneController(sceneName);\n    sceneController.on(eventName, eventHandler);\n  }\n\n  public enableAudio(sceneName: string) {\n    const sceneController = this.getSceneController(sceneName);\n    sceneController.enableAudio();\n  }\n}\n"]}},"error":null,"hash":"02583092301b7af9e86bb7387f1d0063","cacheData":{"env":{}}}