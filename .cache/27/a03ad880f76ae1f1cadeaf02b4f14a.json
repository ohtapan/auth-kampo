{"id":"node_modules/@aws-amplify/xr/lib/XR.js","dependencies":[{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\XR.js.map","includedInParent":true,"mtime":1557861868000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\xr\\src\\XR.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\xr\\package.json","includedInParent":true,"mtime":1560308010593},{"name":"@aws-amplify/core","loc":{"line":50,"column":21},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\XR.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\index.js"},{"name":"./Providers/SumerianProvider","loc":{"line":51,"column":33},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\XR.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\Providers\\SumerianProvider.js"},{"name":"./Errors","loc":{"line":52,"column":23},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\XR.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\xr\\lib\\Errors.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar core_1 = require(\"@aws-amplify/core\");\nvar SumerianProvider_1 = require(\"./Providers/SumerianProvider\");\nvar Errors_1 = require(\"./Errors\");\nvar logger = new core_1.ConsoleLogger('XR');\nvar DEFAULT_PROVIDER_NAME = \"SumerianProvider\";\nvar XR = /** @class */ (function () {\n    /**\n     * Initialize XR with AWS configurations\n     *\n     * @param {XROptions} options - Configuration object for XR\n     */\n    function XR(options) {\n        this._options = options;\n        logger.debug('XR Options', this._options);\n        this._defaultProvider = DEFAULT_PROVIDER_NAME;\n        this._pluggables = {};\n        // Add default provider\n        this.addPluggable(new SumerianProvider_1.SumerianProvider());\n    }\n    /**\n     * Configure XR part with configurations\n     *\n     * @param {XROptions} config - Configuration for XR\n     * @return {Object} - The current configuration\n     */\n    XR.prototype.configure = function (options) {\n        var _this = this;\n        var opt = options ? options.XR || options : {};\n        logger.debug('configure XR', { opt: opt });\n        this._options = Object.assign({}, this._options, opt);\n        Object.entries(this._pluggables).map(function (_a) {\n            var name = _a[0], provider = _a[1];\n            if (name === _this._defaultProvider && !opt[_this._defaultProvider]) {\n                provider.configure(_this._options);\n            }\n            else {\n                provider.configure(_this._options[name]);\n            }\n        });\n        return this._options;\n    };\n    /**\n     * add plugin into XR category\n     * @param {Object} pluggable - an instance of the plugin\n     */\n    XR.prototype.addPluggable = function (pluggable) {\n        return __awaiter(this, void 0, void 0, function () {\n            var config;\n            return __generator(this, function (_a) {\n                if (pluggable && pluggable.getCategory() === 'XR') {\n                    this._pluggables[pluggable.getProviderName()] = pluggable;\n                    config = pluggable.configure(this._options);\n                    return [2 /*return*/, config];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    XR.prototype.loadScene = function (sceneName, domElementId, sceneOptions, provider) {\n        if (sceneOptions === void 0) { sceneOptions = {}; }\n        if (provider === void 0) { provider = this._defaultProvider; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._pluggables[provider])\n                            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n                        return [4 /*yield*/, this._pluggables[provider].loadScene(sceneName, domElementId, sceneOptions)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    XR.prototype.isSceneLoaded = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].isSceneLoaded(sceneName);\n    };\n    XR.prototype.getSceneController = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].getSceneController(sceneName);\n    };\n    XR.prototype.isVRCapable = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].isVRCapable(sceneName);\n    };\n    XR.prototype.isVRPresentationActive = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].isVRPresentationActive(sceneName);\n    };\n    XR.prototype.start = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].start(sceneName);\n    };\n    XR.prototype.enterVR = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].enterVR(sceneName);\n    };\n    XR.prototype.exitVR = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].exitVR(sceneName);\n    };\n    XR.prototype.isMuted = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].isMuted(sceneName);\n    };\n    XR.prototype.setMuted = function (sceneName, muted, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].setMuted(sceneName, muted);\n    };\n    XR.prototype.onSceneEvent = function (sceneName, eventName, eventHandler, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].onSceneEvent(sceneName, eventName, eventHandler);\n    };\n    XR.prototype.enableAudio = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new Errors_1.XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].enableAudio(sceneName);\n    };\n    return XR;\n}());\nexports.default = XR;\n"},"sourceMaps":{"js":{"version":3,"file":"XR.js","sourceRoot":"","sources":["../src/XR.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { XRProvider, XROptions, SceneOptions } from './types';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\n\nconst logger = new Logger('XR');\n\nconst DEFAULT_PROVIDER_NAME = \"SumerianProvider\";\n\nexport default class XR {\n\n    private _options: XROptions;\n\n    private _pluggables: { [key:string]:XRProvider };\n    private _defaultProvider: string;\n\n    /**\n     * Initialize XR with AWS configurations\n     * \n     * @param {XROptions} options - Configuration object for XR\n     */\n    constructor(options: XROptions) {\n        this._options = options;\n        logger.debug('XR Options', this._options);\n        this._defaultProvider = DEFAULT_PROVIDER_NAME;\n        this._pluggables = {};\n\n        // Add default provider\n        this.addPluggable(new SumerianProvider());\n    }\n\n    /**\n     * Configure XR part with configurations\n     * \n     * @param {XROptions} config - Configuration for XR\n     * @return {Object} - The current configuration\n     */\n    configure(options: XROptions) {\n        const opt = options ? options.XR || options : {};\n        logger.debug('configure XR', { opt });\n\n        this._options = Object.assign({}, this._options, opt);\n\n        Object.entries(this._pluggables).map(([name, provider]) => {\n            if (name === this._defaultProvider && !opt[this._defaultProvider]) {\n                provider.configure(this._options);\n            } else {\n                provider.configure(this._options[name]);\n            }\n        });\n\n        return this._options;\n    }\n\n    /**\n     * add plugin into XR category\n     * @param {Object} pluggable - an instance of the plugin\n     */\n    public async addPluggable(pluggable: XRProvider) {\n        if (pluggable && pluggable.getCategory() === 'XR') {\n            this._pluggables[pluggable.getProviderName()] = pluggable;\n            const config = pluggable.configure(this._options);\n\n            return config;\n        }\n    }\n\n    public async loadScene(\n        sceneName: string, \n        domElementId: string, \n        sceneOptions: SceneOptions = {},\n        provider: string = this._defaultProvider\n    ) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return await this._pluggables[provider].loadScene(sceneName, domElementId, sceneOptions);\n    }\n\n    public isSceneLoaded(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].isSceneLoaded(sceneName);\n    }\n\n    public getSceneController(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].getSceneController(sceneName);\n    }\n\n    public isVRCapable(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].isVRCapable(sceneName);\n    }\n\n    public isVRPresentationActive(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].isVRPresentationActive(sceneName);\n    }\n\n    public start(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].start(sceneName);\n    }\n\n    public enterVR(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].enterVR(sceneName);\n    }\n\n    public exitVR(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].exitVR(sceneName);\n    }\n\n    public isMuted(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].isMuted(sceneName);\n    }\n    \n    public setMuted(sceneName: string, muted: boolean, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].setMuted(sceneName, muted);\n    }\n\n    public onSceneEvent(\n        sceneName: string, \n        eventName: string, \n        eventHandler: Function, \n        provider: string = this._defaultProvider\n    ) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].onSceneEvent(sceneName, eventName, eventHandler);\n    }\n\n    public enableAudio(sceneName: string, provider: string = this._defaultProvider) {\n        if (!this._pluggables[provider]) throw new XRProviderNotConfigured(`Provider '${provider}' not configured`);\n        return this._pluggables[provider].enableAudio(sceneName);\n    }\n}\n"]}},"error":null,"hash":"070c0615edac0015dc94caf74a3683cc","cacheData":{"env":{}}}