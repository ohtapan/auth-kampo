{"id":"node_modules/@aws-amplify/core/lib/ServiceWorker/ServiceWorker.js","dependencies":[{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\ServiceWorker\\ServiceWorker.js.map","includedInParent":true,"mtime":1557861835000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\src\\ServiceWorker\\ServiceWorker.ts","includedInParent":true,"mtime":1557861739000},{"name":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\package.json","includedInParent":true,"mtime":1560308010599},{"name":"../Logger","loc":{"line":15,"column":23},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\ServiceWorker\\ServiceWorker.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Logger\\index.js"},{"name":"../JS","loc":{"line":16,"column":19},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\ServiceWorker\\ServiceWorker.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\JS.js"},{"name":"../Amplify","loc":{"line":17,"column":24},"parent":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\ServiceWorker\\ServiceWorker.js","resolved":"C:\\Users\\太田遥人\\Desktop\\auth-kampo\\node_modules\\@aws-amplify\\core\\lib\\Amplify.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar Logger_1 = require(\"../Logger\");\nvar JS_1 = require(\"../JS\");\nvar Amplify_1 = require(\"../Amplify\");\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nvar ServiceWorkerClass = /** @class */ (function () {\n    function ServiceWorkerClass() {\n        // The AWS Amplify logger\n        this._logger = new Logger_1.ConsoleLogger('ServiceWorker');\n    }\n    Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n        /**\n         * Get the currently active service worker\n         */\n        get: function () {\n            return this._serviceWorker;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Register the service-worker.js file in the browser\n     * Make sure the service-worker.js is part of the build\n     * for example with Angular, modify the angular-cli.json file\n     * and add to \"assets\" array \"service-worker.js\"\n     * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n     * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     * @returns {Promise}\n     *\t- resolve(ServiceWorkerRegistration)\n     *\t- reject(Error)\n     **/\n    ServiceWorkerClass.prototype.register = function (filePath, scope) {\n        var _this = this;\n        if (filePath === void 0) { filePath = '/service-worker.js'; }\n        if (scope === void 0) { scope = '/'; }\n        this._logger.debug(\"registering \" + filePath);\n        this._logger.debug(\"registering service worker with scope \" + scope);\n        return new Promise(function (resolve, reject) {\n            if (navigator && 'serviceWorker' in navigator) {\n                navigator.serviceWorker.register(filePath, {\n                    'scope': scope\n                }).then(function (registration) {\n                    if (registration.installing) {\n                        _this._serviceWorker = registration.installing;\n                    }\n                    else if (registration.waiting) {\n                        _this._serviceWorker = registration.waiting;\n                    }\n                    else if (registration.active) {\n                        _this._serviceWorker = registration.active;\n                    }\n                    _this._registration = registration;\n                    _this._setupListeners();\n                    _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n                    return resolve(registration);\n                }).catch(function (error) {\n                    _this._logger.debug(\"Service Worker Registration Failed \" + error);\n                    return reject(error);\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Enable web push notifications. If not subscribed, a new subscription will\n     * be created and registered.\n     * \tTest Push Server: https://web-push-codelab.glitch.me/\n     * \tPush Server Libraries: https://github.com/web-push-libs/\n     * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n     * @param publicKey\n     * @returns {Promise}\n     * \t- resolve(PushSubscription)\n     *  - reject(Error)\n     */\n    ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n        var _this = this;\n        if (!this._registration)\n            throw new Error('Service Worker not registered');\n        this._publicKey = publicKey;\n        return new Promise(function (resolve, reject) {\n            if (JS_1.default.browserOrNode().isBrowser) {\n                _this._registration.pushManager.getSubscription()\n                    .then(function (subscription) {\n                    if (subscription) {\n                        _this._subscription = subscription;\n                        _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n                        resolve(subscription);\n                    }\n                    else {\n                        _this._logger.debug(\"User is NOT subscribed to push\");\n                        return _this._registration.pushManager.subscribe({\n                            'userVisibleOnly': true,\n                            'applicationServerKey': _this._urlB64ToUint8Array(publicKey)\n                        }).then(function (subscription) {\n                            _this._subscription = subscription;\n                            _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n                            resolve(subscription);\n                        }).catch(function (error) {\n                            _this._logger.error(error);\n                        });\n                    }\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Convert a base64 encoded string to a Uint8 array for the push server key\n     * @param base64String\n     */\n    ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n        var padding = '='.repeat((4 - base64String.length % 4) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (var i = 0; i < rawData.length; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    };\n    /**\n     * Send a message to the service worker. The service worker needs\n     * to implement `self.addEventListener('message') to handle the\n     * message. This ***currently*** does not work in Safari or IE.\n     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n      *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n     * @returns {Promise}\n     **/\n    ServiceWorkerClass.prototype.send = function (message) {\n        if (this._serviceWorker) {\n            this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n        }\n    };\n    /**\n     * Listen for service worker state change and message events\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n     **/\n    ServiceWorkerClass.prototype._setupListeners = function () {\n        var _this = this;\n        this._serviceWorker.addEventListener('statechange', function (event) {\n            var currentState = _this._serviceWorker.state;\n            _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n            if (Amplify_1.default.Analytics && typeof Amplify_1.default.Analytics.record === 'function') {\n                Amplify_1.default.Analytics.record({\n                    name: 'ServiceWorker',\n                    attributes: {\n                        'state': currentState\n                    }\n                });\n            }\n        });\n        this._serviceWorker.addEventListener('message', function (event) {\n            _this._logger.debug(\"ServiceWorker message event: \" + event);\n        });\n    };\n    return ServiceWorkerClass;\n}());\nexports.default = ServiceWorkerClass;\n"},"sourceMaps":{"js":{"version":3,"file":"ServiceWorker.js","sourceRoot":"","sources":["../../src/ServiceWorker/ServiceWorker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport JS from '../JS';\nimport Amplify from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nclass ServiceWorkerClass {\n\n    // The active service worker will be set once it is registered\n    private _serviceWorker: ServiceWorker;\n\n    // The service worker registration object\n    private _registration: ServiceWorkerRegistration;\n\n    // The application server public key for Push\n    // https://web-push-codelab.glitch.me/\n    private _publicKey: string;\n\n    // push subscription\n    private _subscription: PushSubscription;\n\n    // The AWS Amplify logger\n    private _logger: Logger = new Logger('ServiceWorker');\n\n    constructor() { }\n\n    /**\n     * Get the currently active service worker\n     */\n    get serviceWorker(): ServiceWorker {\n        return this._serviceWorker;\n    }\n\n    /**\n     * Register the service-worker.js file in the browser\n     * Make sure the service-worker.js is part of the build\n     * for example with Angular, modify the angular-cli.json file\n     * and add to \"assets\" array \"service-worker.js\"\n     * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n     * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     * @returns {Promise}\n     *\t- resolve(ServiceWorkerRegistration)\n     *\t- reject(Error)\n     **/\n    register(filePath: string = '/service-worker.js', scope: string = '/') {\n        this._logger.debug(`registering ${filePath}`);\n        this._logger.debug(`registering service worker with scope ${scope}`);\n        return new Promise((resolve, reject) => {\n            if (navigator && 'serviceWorker' in navigator) {\n                navigator.serviceWorker.register(filePath, {\n                    'scope': scope\n                }).then((registration) => {\n                    if (registration.installing) {\n                        this._serviceWorker = registration.installing;\n                    } else if (registration.waiting) {\n                        this._serviceWorker = registration.waiting;\n                    } else if (registration.active) {\n                        this._serviceWorker = registration.active;\n                    }\n                    this._registration = registration;\n                    this._setupListeners();\n                    this._logger.debug(`Service Worker Registration Success: ${registration}`);\n                    return resolve(registration);\n                }).catch((error) => {\n                    this._logger.debug(`Service Worker Registration Failed ${error}`);\n                    return reject(error);\n                });\n            } else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    }\n\n    /**\n     * Enable web push notifications. If not subscribed, a new subscription will\n     * be created and registered.\n     * \tTest Push Server: https://web-push-codelab.glitch.me/\n     * \tPush Server Libraries: https://github.com/web-push-libs/\n     * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n     * @param publicKey\n     * @returns {Promise}\n     * \t- resolve(PushSubscription)\n     *  - reject(Error)\n     */\n    enablePush(publicKey: string) {\n        if (!this._registration) throw new Error('Service Worker not registered');\n        this._publicKey = publicKey;\n        return new Promise((resolve, reject) => {\n            if (JS.browserOrNode().isBrowser) {\n                this._registration.pushManager.getSubscription()\n                    .then((subscription) => {\n                        if (subscription) {\n                            this._subscription = subscription;\n                            this._logger.debug(`User is subscribed to push: ${JSON.stringify(subscription)}`);\n                            resolve(subscription);\n                        } else {\n                            this._logger.debug(`User is NOT subscribed to push`);\n                            return this._registration.pushManager.subscribe({\n                                'userVisibleOnly': true,\n                                'applicationServerKey': this._urlB64ToUint8Array(publicKey)\n                            }).then((subscription) => {\n                                this._subscription = subscription;\n                                this._logger.debug(`User subscribed: ${JSON.stringify(subscription)}`);\n                                resolve(subscription);\n                            }).catch((error) => {\n                                this._logger.error(error);\n                            });\n                        }\n                    });\n            } else {\n                return reject(new Error('Service Worker not available'));\n            }\n            \n        });\n    }\n\n    /**\n     * Convert a base64 encoded string to a Uint8 array for the push server key\n     * @param base64String\n     */\n    private _urlB64ToUint8Array(base64String: string) {\n        const padding = '='.repeat((4 - base64String.length % 4) % 4);\n        const base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n\n        const rawData = window.atob(base64);\n        const outputArray = new Uint8Array(rawData.length);\n\n        for (let i = 0; i < rawData.length; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    }\n\n\n    /**\n     * Send a message to the service worker. The service worker needs\n     * to implement `self.addEventListener('message') to handle the\n     * message. This ***currently*** does not work in Safari or IE.\n     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n      *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n     * @returns {Promise}\n     **/\n    send(message: object | string) {\n        if (this._serviceWorker) {\n            this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n        }\n    }\n\n    /**\n     * Listen for service worker state change and message events\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n     **/\n    _setupListeners() {\n        this._serviceWorker.addEventListener('statechange', event => {\n            const currentState = this._serviceWorker.state;\n            this._logger.debug(`ServiceWorker statechange: ${currentState}`);\n            if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n                Amplify.Analytics.record({\n                    name: 'ServiceWorker',\n                    attributes: {\n                        'state': currentState\n                    }\n                });\n            }\n        });\n        this._serviceWorker.addEventListener('message', event => {\n            this._logger.debug(`ServiceWorker message event: ${event}`);\n        });\n    }\n}\n\nexport default ServiceWorkerClass;\n\n"]}},"error":null,"hash":"ed8d5d7e0f20684ede73c443abaac5e7","cacheData":{"env":{}}}